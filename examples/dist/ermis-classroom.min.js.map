{"version":3,"file":"ermis-classroom.min.js","sources":["../src/events/EventEmitter.js","../src/api/ApiClient.js","../src/core/Participant.js","../src/media/Publisher.js","../src/media/Subscriber.js","../src/media/AudioMixer.js","../src/core/Room.js","../src/core/SubRoom.js","../src/core/ErmisClient.js","../src/index.js","../src/raptorQ/raptorq_wasm.js"],"sourcesContent":["/**\n * Base EventEmitter class for handling events across the SDK\n */\nclass EventEmitter {\n  constructor() {\n    this._events = new Map();\n  }\n\n  on(event, listener) {\n    if (!this._events.has(event)) {\n      this._events.set(event, []);\n    }\n    this._events.get(event).push(listener);\n    return this;\n  }\n\n  off(event, listener) {\n    if (!this._events.has(event)) return this;\n\n    const listeners = this._events.get(event);\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length === 0) {\n      this._events.delete(event);\n    }\n    return this;\n  }\n\n  emit(event, ...args) {\n    if (!this._events.has(event)) return false;\n\n    const listeners = this._events.get(event);\n    listeners.forEach((listener) => {\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(`Error in event listener for ${event}:`, error);\n      }\n    });\n    return true;\n  }\n\n  once(event, listener) {\n    const onceWrapper = (...args) => {\n      this.off(event, onceWrapper);\n      listener(...args);\n    };\n    return this.on(event, onceWrapper);\n  }\n\n  removeAllListeners(event) {\n    if (event) {\n      this._events.delete(event);\n    } else {\n      this._events.clear();\n    }\n    return this;\n  }\n\n  listenerCount(event) {\n    return this._events.has(event) ? this._events.get(event).length : 0;\n  }\n}\n\nexport default EventEmitter;\n","/**\n * API Client for handling HTTP requests to Ermis Meeting API\n */\nclass ApiClient {\n  constructor(config) {\n    this.host = config.host || \"daibo.ermis.network:9992\";\n    this.apiBaseUrl = config.apiUrl || `https://${this.host}/meeting`;\n    this.jwtToken = null;\n    this.userId = null;\n  }\n\n  /**\n   * Set authentication token and user ID\n   */\n  setAuth(token, userId) {\n    this.jwtToken = token;\n    this.userId = userId;\n  }\n\n  /**\n   * Generic API call method\n   */\n  async apiCall(endpoint, method = \"GET\", body = null) {\n    if (!this.userId) {\n      throw new Error(\"Please authenticate first\");\n    }\n\n    if (!this.jwtToken) {\n      throw new Error(\"JWT token not found\");\n    }\n\n    const options = {\n      method,\n      headers: {\n        Authorization: `Bearer ${this.jwtToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n\n    try {\n      const response = await fetch(`${this.apiBaseUrl}${endpoint}`, options);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"API call failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get dummy token for authentication\n   */\n  async getDummyToken(userId) {\n    const endpoint = \"/get-token\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ sub: userId }),\n    };\n\n    try {\n      const response = await fetch(`${this.apiBaseUrl}${endpoint}`, options);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Token request failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new room\n   */\n  async createRoom(roomName, roomType = \"main\") {\n    return await this.apiCall(\"/rooms\", \"POST\", {\n      room_name: roomName,\n      room_type: roomType,\n    });\n  }\n\n  /**\n   * List available rooms\n   */\n  async listRooms(page = 1, perPage = 20) {\n    return await this.apiCall(\"/rooms/list\", \"POST\", {\n      list_query: {\n        page,\n        per_page: perPage,\n        sort_by: \"created_at\",\n        sort_order: \"desc\",\n      },\n      conditions: {\n        is_active: true,\n      },\n    });\n  }\n\n  /**\n   * Get room details by ID\n   */\n  async getRoomById(roomId) {\n    return await this.apiCall(`/rooms/${roomId}`);\n  }\n\n  /**\n   * Join a room by room code\n   */\n  async joinRoom(roomCode, appName = \"Ermis-Meeting\") {\n    return await this.apiCall(\"/rooms/join\", \"POST\", {\n      room_code: roomCode,\n      app_name: appName,\n    });\n  }\n\n  /**\n   * Create a sub room\n   */\n  async createSubRoom(parentRoomId, subRoomName, subRoomType = \"breakout\") {\n    return await this.apiCall(\"/rooms\", \"POST\", {\n      room_name: subRoomName,\n      room_type: subRoomType,\n      parent_room_id: parentRoomId,\n    });\n  }\n\n  /**\n   * Get sub rooms of a parent room\n   */\n  async getSubRooms(parentRoomId) {\n    return await this.apiCall(`/rooms/${parentRoomId}/sub-rooms`);\n  }\n\n  /**\n   * Leave a room\n   */\n  async leaveRoom(roomId, membershipId) {\n    return await this.apiCall(\n      `/rooms/${roomId}/members/${membershipId}`,\n      \"DELETE\"\n    );\n  }\n\n  /**\n   * Switch to sub room\n   */\n  async switchToSubRoom(roomId, subRoomCode) {\n    return await this.apiCall(\"/rooms/switch\", \"POST\", {\n      room_id: roomId,\n      sub_room_code: subRoomCode,\n    });\n  }\n\n  /**\n   * Get room members\n   */\n  async getRoomMembers(roomId) {\n    return await this.apiCall(`/rooms/${roomId}/members`);\n  }\n\n  /**\n   * Update room settings\n   */\n  async updateRoom(roomId, updates) {\n    return await this.apiCall(`/rooms/${roomId}`, \"PATCH\", updates);\n  }\n\n  /**\n   * Delete/Close room\n   */\n  async deleteRoom(roomId) {\n    return await this.apiCall(`/rooms/${roomId}`, \"DELETE\");\n  }\n}\n\nexport default ApiClient;\n","import EventEmitter from \"../events/EventEmitter.js\";\n\n/**\n * Represents a participant in a meeting room\n */\nclass Participant extends EventEmitter {\n  constructor(config) {\n    super();\n\n    this.userId = config.userId;\n    this.streamId = config.streamId;\n    this.membershipId = config.membershipId;\n    this.role = config.role || \"participant\";\n    this.roomId = config.roomId;\n    this.isLocal = config.isLocal || false;\n\n    // Media state\n    this.isAudioEnabled = true;\n    this.isVideoEnabled = true;\n    this.isPinned = false;\n\n    // Media components\n    this.publisher = null;\n    this.subscriber = null;\n\n    // Screen share state\n    this.isScreenSharing = config.isScreenSharing || false;\n    this.screenSubscriber = null;\n\n    // Status\n    this.connectionStatus = \"disconnected\"; // 'connecting', 'connected', 'disconnected', 'failed'\n  }\n\n  /**\n   * Get display name with role\n   */\n  getDisplayName() {\n    const roleText = this.role === \"owner\" ? \" (Host)\" : \"\";\n    const localText = this.isLocal ? \" (You)\" : \"\";\n    return `${this.userId}${roleText}${localText}`;\n  }\n\n  /**\n   * Toggle microphone (local only)\n   */\n  async toggleMicrophone() {\n    if (!this.isLocal || !this.publisher) return;\n\n    try {\n      await this.publisher.toggleMic();\n      this.isAudioEnabled = !this.isAudioEnabled;\n      this.emit(\"audioToggled\", {\n        participant: this,\n        enabled: this.isAudioEnabled,\n      });\n    } catch (error) {\n      this.emit(\"error\", {\n        participant: this,\n        error,\n        action: \"toggleMicrophone\",\n      });\n    }\n  }\n\n  /**\n   * Toggle camera (local only)\n   */\n  async toggleCamera() {\n    if (!this.isLocal || !this.publisher) return;\n\n    try {\n      await this.publisher.toggleCamera();\n      this.isVideoEnabled = !this.isVideoEnabled;\n      this.emit(\"videoToggled\", {\n        participant: this,\n        enabled: this.isVideoEnabled,\n      });\n    } catch (error) {\n      this.emit(\"error\", { participant: this, error, action: \"toggleCamera\" });\n    }\n  }\n\n  /**\n   * Toggle remote participant's audio\n   */\n  async toggleRemoteAudio() {\n    if (this.isLocal || !this.subscriber) return;\n\n    try {\n      await this.subscriber.toggleAudio();\n      this.isAudioEnabled = !this.isAudioEnabled;\n      this.emit(\"remoteAudioToggled\", {\n        participant: this,\n        enabled: this.isAudioEnabled,\n      });\n    } catch (error) {\n      this.emit(\"error\", {\n        participant: this,\n        error,\n        action: \"toggleRemoteAudio\",\n      });\n    }\n  }\n\n  /**\n   * Toggle pin status\n   */\n  togglePin() {\n    if (!this.isLocal) {\n      if (this.isPinned) {\n        this.subscriber?.switchBitrate(\"360p\");\n        console.warn(\"Unpin participant, switch to low quality\");\n      } else {\n        this.subscriber?.switchBitrate(\"720p\");\n        console.warn(\"Pin participant, switch to high quality\");\n      }\n    }\n\n    this.isPinned = !this.isPinned;\n    this.emit(\"pinToggled\", { participant: this, pinned: this.isPinned });\n  }\n\n  /**\n   * Update connection status\n   */\n  setConnectionStatus(status) {\n    this.connectionStatus = status;\n    this.emit(\"statusChanged\", { participant: this, status });\n  }\n\n  /**\n   * Get status text for display\n   */\n  _getStatusText(status) {\n    switch (status) {\n      case \"connecting\":\n        return \"Connecting...\";\n      case \"connected\":\n        return \"Connected\";\n      case \"disconnected\":\n        return \"Disconnected\";\n      case \"failed\":\n        return \"Connection Failed\";\n      default:\n        return status;\n    }\n  }\n\n  /**\n   * Set publisher instance\n   */\n  setPublisher(publisher) {\n    this.publisher = publisher;\n    if (publisher) {\n      this.setConnectionStatus(\"connected\");\n    }\n  }\n\n  /**\n   * Set subscriber instance\n   */\n  setSubscriber(subscriber) {\n    this.subscriber = subscriber;\n    if (subscriber) {\n      this.setConnectionStatus(\"connected\");\n    }\n  }\n\n  /**\n   * Update microphone status from server event\n   */\n  updateMicStatus(enabled) {\n    this.isAudioEnabled = enabled;\n    this.emit(\"remoteAudioStatusChanged\", {\n      participant: this,\n      enabled: this.isAudioEnabled,\n    });\n  }\n\n  /**\n   * Update camera status from server event\n   */\n  updateCameraStatus(enabled) {\n    this.isVideoEnabled = enabled;\n    this.emit(\"remoteVideoStatusChanged\", {\n      participant: this,\n      enabled: this.isVideoEnabled,\n    });\n  }\n\n  /**\n   * Cleanup participant resources\n   */\n  cleanup() {\n    // Stop media streams\n    if (this.publisher) {\n      this.publisher.stop();\n      this.publisher = null;\n    }\n\n    if (this.subscriber) {\n      this.subscriber.stop();\n      this.subscriber = null;\n    }\n\n    // Stop screen subscriber\n    if (this.screenSubscriber) {\n      this.screenSubscriber.stop();\n      this.screenSubscriber = null;\n    }\n\n    this.setConnectionStatus(\"disconnected\");\n    this.removeAllListeners();\n\n    this.emit(\"cleanup\", { participant: this });\n  }\n\n  /**\n   * Get participant info\n   */\n  getInfo() {\n    return {\n      userId: this.userId,\n      streamId: this.streamId,\n      membershipId: this.membershipId,\n      role: this.role,\n      isLocal: this.isLocal,\n      isAudioEnabled: this.isAudioEnabled,\n      isVideoEnabled: this.isVideoEnabled,\n      isPinned: this.isPinned,\n      isScreenSharing: this.isScreenSharing,\n      connectionStatus: this.connectionStatus,\n    };\n  }\n}\n\nexport default Participant;\n","import EventEmitter from \"../events/EventEmitter.js\";\n\n/**\n * WebRTC Publisher Class\n * Handles video/audio streaming via WebTransport\n */\nexport default class Publisher extends EventEmitter {\n  constructor(options = {}) {\n    super();\n\n    // Validate required options\n    if (!options.publishUrl) {\n      throw new Error(\"publishUrl is required\");\n    }\n\n    // Configuration\n    this.publishUrl = options.publishUrl;\n    this.streamType = options.streamType || \"camera\"; // 'camera' or 'display'\n    this.streamId = options.streamId || \"test_stream\";\n\n    // Video configuration\n    this.currentConfig = {\n      codec: \"avc1.640c34\",\n      width: options.width || 1280,\n      height: options.height || 720,\n      framerate: options.framerate || 30,\n      bitrate: options.bitrate || 1_500_000,\n    };\n\n    // Audio configuration\n    this.kSampleRate = 48000;\n    this.opusBaseTime = 0;\n    this.opusSamplesSent = 0;\n    this.opusSamplesPerChunk = 960; // 20ms at 48kHz\n    this.opusChunkCount = 0;\n\n    // State variables\n    this.stream = null;\n    this.audioProcessor = null;\n    this.videoProcessor = null;\n    this.webTransport = null;\n    this.isChannelOpen = false;\n    this.sequenceNumber = 0;\n    this.isPublishing = false;\n\n    this.cameraEnabled = true;\n    this.micEnabled = true;\n    this.hasCamera = options.hasCamera !== undefined ? options.hasCamera : true;\n    this.hasMic = options.hasMic !== undefined ? options.hasMic : true;\n\n    // Callbacks\n    this.onStatusUpdate =\n      options.onStatusUpdate || ((message, isError) => console.log(message));\n    this.onStreamStart = options.onStreamStart || (() => { });\n    this.onStreamStop = options.onStreamStop || (() => { });\n    this.onServerEvent = options.onServerEvent || ((event) => { });\n\n    // Initialize modules\n    this.wasmInitialized = false;\n    this.wasmInitializing = false;\n    this.wasmInitPromise = null;\n    this.initAudioRecorder = null;\n    this.WasmEncoder = null;\n\n    // Stream management\n    this.publishStreams = new Map(); // key: channelName, value: {writer, reader, configSent, config}\n    this.videoEncoders = new Map();\n    this.eventStream = null; // Dedicated event stream\n\n    this.subStreams = [\n      {\n        name: \"high\",\n        width: 1280,\n        height: 720,\n        bitrate: 800_000,\n        framerate: 30,\n        channelName: \"cam_720p\",\n      },\n      // {\n      //   name: \"low\",\n      //   width: 854,\n      //   height: 480,\n      //   bitrate: 500_000,\n      //   framerate: 30,\n      //   channelName: \"cam_360p\",\n      // },\n      {\n        name: \"low\",\n        width: 640,\n        height: 360,\n        bitrate: 400_000,\n        framerate: 30,\n        channelName: \"cam_360p\",\n      },\n      {\n        name: \"screen\",\n        width: 1920,\n        height: 1080,\n        bitrate: 2_000_000,\n        framerate: 30,\n        channelName: \"screen_share_1080p\",\n      },\n      {\n        name: \"microphone\",\n        channelName: \"mic_48k\",\n      },\n    ];\n  }\n\n  async init() {\n    await this.loadAllDependencies();\n    this.onStatusUpdate(\"Publisher initialized successfully\");\n  }\n\n  async loadAllDependencies() {\n    try {\n      if (\n        !document.querySelector('script[src*=\"MSTP_polyfill.js\"]')\n      ) {\n        await new Promise((resolve, reject) => {\n          const script = document.createElement(\"script\");\n          script.src = \"../polyfills/MSTP_polyfill.js\";\n          script.onload = () => resolve();\n          script.onerror = () =>\n            reject(new Error(\"Failed to load MSTP polyfill\"));\n          document.head.appendChild(script);\n        });\n        console.log(\"Polyfill loaded successfully\");\n      }\n\n      if (!this.wasmInitialized) {\n        if (this.wasmInitializing && this.wasmInitPromise) {\n          await this.wasmInitPromise;\n        } else {\n          this.wasmInitializing = true;\n          const { default: init, WasmEncoder } = await import(\n            \"../raptorQ/raptorq_wasm.js\"\n          );\n\n          this.WasmEncoder = WasmEncoder;\n\n          this.wasmInitPromise = init(\"../raptorQ/raptorq_wasm_bg.wasm\")\n            .then(() => {\n              this.wasmInitialized = true;\n              this.wasmInitializing = false;\n              console.log(\"WASM encoder module loaded successfully\");\n            })\n            .catch((err) => {\n              this.wasmInitializing = false;\n              console.error(\"Failed to load WASM encoder module:\", err);\n              throw new Error(\"Failed to load WASM encoder module\");\n            });\n\n          await this.wasmInitPromise;\n        }\n      }\n\n      const opusModule = await import(\n        `/opus_decoder/opusDecoder.js?t=${Date.now()}`\n      );\n      this.initAudioRecorder = opusModule.initAudioRecorder;\n      console.log(\"Opus decoder module loaded successfully\");\n\n      this.onStatusUpdate(\"All dependencies loaded successfully\");\n    } catch (error) {\n      this.onStatusUpdate(`Dependency loading error: ${error.message}`, true);\n      throw error;\n    }\n  }\n\n  async startPublishing() {\n    if (this.isPublishing) {\n      this.onStatusUpdate(\"Already publishing\", true);\n      return;\n    }\n    await this.init();\n\n    // Setup WebTransport connection\n    await this.setupConnection();\n\n    try {\n      // Get media stream based on type\n      await this.getMediaStream();\n      this.isPublishing = true;\n      // Start streaming\n      await this.startStreaming();\n\n      this.onStreamStart();\n      this.onStatusUpdate(\"Publishing started successfully\");\n    } catch (error) {\n      this.onStatusUpdate(`Failed to start publishing: ${error.message}`, true);\n      throw error;\n    }\n  }\n\n  // Toggle camera\n  async toggleCamera() {\n    if (this.cameraEnabled) {\n      await this.turnOffCamera();\n    } else {\n      await this.turnOnCamera();\n    }\n  }\n\n  // Toggle mic\n  async toggleMic() {\n    if (this.micEnabled) {\n      await this.turnOffMic();\n    } else {\n      await this.turnOnMic();\n    }\n  }\n\n  // Turn off camera (stop encoding video frames)\n  async turnOffCamera() {\n    if (!this.cameraEnabled) return;\n\n    this.cameraEnabled = false;\n    this.onStatusUpdate(\"Camera turned off\");\n\n    // Send camera_off event to server\n    await this.sendMeetingEvent(\"camera_off\");\n  }\n\n  // Turn on camera (resume encoding video frames)\n  async turnOnCamera() {\n    if (this.cameraEnabled) return;\n\n    this.cameraEnabled = true;\n    this.onStatusUpdate(\"Camera turned on\");\n\n    // Send camera_on event to server\n    await this.sendMeetingEvent(\"camera_on\");\n  }\n\n  // Turn off mic (stop encoding audio chunks)\n  async turnOffMic() {\n    if (!this.micEnabled) return;\n\n    this.micEnabled = false;\n    this.onStatusUpdate(\"Mic turned off\");\n\n    // Send mic_off event to server\n    await this.sendMeetingEvent(\"mic_off\");\n  }\n\n  // Turn on mic (resume encoding audio chunks)\n  async turnOnMic() {\n    if (this.micEnabled) return;\n\n    this.micEnabled = true;\n    this.onStatusUpdate(\"Mic turned on\");\n\n    // Send mic_on event to server\n    await this.sendMeetingEvent(\"mic_on\");\n  }\n\n  /**\n   * Send meeting control event to server\n   */\n  async sendMeetingEvent(eventType, targetStreamId = null) {\n    if (!eventType) return;\n\n    if (!this.isChannelOpen || !this.eventStream) {\n      console.warn(`Skipping ${eventType} event: Event stream not ready`);\n      return;\n    }\n    console.log(\"[Meeting Event] Sender stream ID:\", this.streamId);\n\n    const eventMessage = {\n      type: eventType,\n      sender_stream_id: this.streamId,\n      timestamp: Date.now(),\n    };\n\n    if (\n      (eventType === \"pin_for_everyone\" ||\n        eventType === \"unpin_for_everyone\") &&\n      targetStreamId\n    ) {\n      eventMessage.target_stream_id = targetStreamId;\n    }\n\n    try {\n      await this.sendEvent(eventMessage);\n      console.log(`Sent meeting event:`, eventMessage);\n    } catch (error) {\n      console.error(`Failed to send meeting event ${eventType}:`, error);\n      this.onStatusUpdate(`Failed to notify server about ${eventType}`, true);\n    }\n  }\n\n  async getMediaStream() {\n    if (this.streamType === \"camera\") {\n      const constraints = {\n        audio: {\n          sampleRate: this.kSampleRate,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n        },\n        video: {\n          width: { ideal: this.currentConfig.width },\n          height: { ideal: this.currentConfig.height },\n          frameRate: { ideal: this.currentConfig.framerate },\n        },\n      };\n      try {\n        this.stream = await navigator.mediaDevices.getUserMedia(constraints);\n      } catch (error) {\n        console.error(\"Error accessing media devices:\", error);\n      }\n    } else if (this.streamType === \"display\") {\n      this.stream = await navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: true,\n      });\n\n      // Handle user stopping screen share via browser UI\n      const videoTrack = this.stream.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.onended = () => {\n          this.stop();\n        };\n      }\n    }\n\n    // Create video-only stream for display\n    const videoOnlyStream = new MediaStream();\n    const videoTracks = this.stream.getVideoTracks();\n\n    if (videoTracks.length > 0) {\n      videoOnlyStream.addTrack(videoTracks[0]);\n    }\n\n    // Emit local stream ready event for app integration\n    this.emit(\"localStreamReady\", {\n      stream: this.stream,           // Full stream with audio + video\n      videoOnlyStream: videoOnlyStream, // Video only stream\n      streamType: this.streamType,\n      streamId: this.streamId,\n      config: this.currentConfig\n    });\n    this.onStatusUpdate(`${this.streamType} stream ready`);\n  }\n\n  initVideoEncoders() {\n    this.subStreams.forEach((subStream) => {\n      if (!subStream.channelName.startsWith(\"mic\")) {\n        console.log(`Setting up encoder for ${subStream.name}`);\n        const encoder = new VideoEncoder({\n          output: (chunk, metadata) =>\n            this.handleVideoChunk(\n              chunk,\n              metadata,\n              subStream.name,\n              subStream.channelName\n            ),\n          error: (e) =>\n            this.onStatusUpdate(\n              `Encoder ${subStream.name} error: ${e.message}`,\n              true\n            ),\n        });\n\n        this.videoEncoders.set(subStream.name, {\n          encoder,\n          channelName: subStream.channelName,\n          config: {\n            codec: this.currentConfig.codec,\n            width: subStream.width,\n            height: subStream.height,\n            bitrate: subStream.bitrate,\n            framerate: this.currentConfig.framerate,\n            latencyMode: \"realtime\",\n            hardwareAcceleration: \"prefer-hardware\",\n          },\n          metadataReady: false,\n          videoDecoderConfig: null,\n        });\n      }\n    });\n  }\n\n  async setupConnection() {\n    this.webTransport = new WebTransport(this.publishUrl);\n    await this.webTransport.ready;\n    console.log(\"WebTransport connected to server\");\n\n    await this.createEventStream();\n\n    for (const subStream of this.subStreams) {\n      if (!subStream.channelName.startsWith(\"screen\")) {\n        await this.createBidirectionalStream(subStream.channelName);\n      }\n    }\n\n    this.isChannelOpen = true;\n    this.onStatusUpdate(\n      \"WebTransport connection established with event stream and media streams\"\n    );\n  }\n\n  async createEventStream() {\n    const stream = await this.webTransport.createBidirectionalStream();\n    const readable = stream.readable;\n    const writable = stream.writable;\n\n    const writer = writable.getWriter();\n    const reader = readable.getReader();\n\n    this.eventStream = { writer, reader };\n\n    console.log(\"WebTransport event stream established\");\n\n    const initData = new TextEncoder().encode(\"meeting_control\");\n    await this.sendOverEventStream(initData);\n\n    // Setup reader cho event stream\n    this.setupEventStreamReader(reader);\n\n    await this.sendPublisherState();\n\n    const workerInterval = new Worker(\"polyfills/intervalWorker.js\");\n    workerInterval.postMessage({ interval: 1000 });\n    let lastPingTime = Date.now();\n\n    workerInterval.onmessage = (e) => {\n      const ping = new TextEncoder().encode(\"ping\");\n      this.sendOverEventStream(ping);\n      if (Date.now() - lastPingTime > 1200) {\n        console.warn(\"Ping delay detected, connection may be unstable\");\n      }\n      lastPingTime = Date.now();\n    };\n\n    // setInterval(() => {\n    //   const ping = new TextEncoder().encode(\"ping\");\n    //   this.sendOverEventStream(ping);\n    //   console.log(\"Ping sent to server\");\n    // }, 500);\n  }\n\n  setupEventStreamReader(reader) {\n    (async () => {\n      try {\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) {\n            console.log(\"Event stream closed by server\");\n            break;\n          }\n          if (value) {\n            const msg = new TextDecoder().decode(value);\n            try {\n              const event = JSON.parse(msg);\n              this.onServerEvent(event);\n            } catch (e) {\n              console.log(\"Non-JSON event message:\", msg);\n            }\n          }\n        }\n      } catch (err) {\n        console.error(\"Error reading from event stream:\", err);\n      }\n    })();\n  }\n\n  async sendOverEventStream(data) {\n    if (!this.eventStream) {\n      console.error(\"Event stream not available\");\n      return;\n    }\n\n    try {\n      const bytes =\n        typeof data === \"string\" ? new TextEncoder().encode(data) : data;\n\n      const len = bytes.length;\n      const out = new Uint8Array(4 + len);\n      const view = new DataView(out.buffer);\n      view.setUint32(0, len, false);\n      out.set(bytes, 4);\n      await this.eventStream.writer.write(out);\n    } catch (error) {\n      console.error(\"Failed to send over event stream:\", error);\n      throw error;\n    }\n  }\n\n  async sendEvent(eventData) {\n    const eventJson = JSON.stringify(eventData);\n    await this.sendOverEventStream(eventJson);\n  }\n\n  async sendPublisherState() {\n    const stateEvent = {\n      type: \"PublisherState\",\n      streamId: this.streamId,\n      hasCamera: this.hasCamera,\n      hasMic: this.hasMic,\n      cameraEnabled: this.hasCamera ? this.cameraEnabled : false,\n      micEnabled: this.hasMic ? this.micEnabled : false,\n      streamType: this.streamType, // 'camera' or 'display'\n      timestamp: Date.now(),\n    };\n\n    await this.sendEvent(stateEvent);\n    this.onStatusUpdate(\"Publisher state sent to server\");\n  }\n\n  async createBidirectionalStream(channelName) {\n    const stream = await this.webTransport.createBidirectionalStream();\n    const readable = stream.readable;\n    const writable = stream.writable;\n\n    const writer = writable.getWriter();\n    const reader = readable.getReader();\n\n    this.publishStreams.set(channelName, {\n      writer,\n      reader,\n      configSent: false,\n      config: null,\n    });\n\n    console.log(\n      `WebTransport bidirectional stream (${channelName}) established`\n    );\n\n    const initData = new TextEncoder().encode(channelName);\n    await this.sendOverStream(channelName, initData);\n\n    this.setupStreamReader(channelName, reader);\n\n    console.log(`Stream created: ${channelName}`);\n  }\n\n  setupStreamReader(channelName, reader) {\n    (async () => {\n      try {\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) {\n            console.log(`Stream ${channelName} closed by server`);\n            break;\n          }\n          if (value) {\n            const msg = new TextDecoder().decode(value);\n            if (msg.startsWith(\"ack:\") || msg.startsWith(\"config:\")) {\n              console.log(`${channelName} received:`, msg);\n            }\n          }\n        }\n      } catch (err) {\n        console.error(`Error reading from stream ${channelName}:`, err);\n      }\n    })();\n  }\n\n  async sendOverStream(channelName, frameBytes) {\n    const streamData = this.publishStreams.get(channelName);\n    if (!streamData) {\n      console.error(`Stream ${channelName} not found`);\n      return;\n    }\n\n    try {\n      const len = frameBytes.length;\n      const out = new Uint8Array(4 + len);\n      const view = new DataView(out.buffer);\n      view.setUint32(0, len, false);\n      out.set(frameBytes, 4);\n      await streamData.writer.write(out);\n    } catch (error) {\n      console.error(`Failed to send over stream ${channelName}:`, error);\n      throw error;\n    }\n  }\n\n  async startStreaming() {\n    // Start video capture\n    await this.startVideoCapture();\n\n    // Start audio streaming\n    this.audioProcessor = await this.startOpusAudioStreaming();\n  }\n\n  async startVideoCapture() {\n    if (!this.stream) {\n      throw new Error(\"No media stream available\");\n    }\n\n    this.initVideoEncoders();\n\n    this.videoEncoders.forEach((encoderObj) => {\n      console.log(\n        `Configuring encoder for ${encoderObj.channelName}`,\n        encoderObj,\n        \"config\",\n        encoderObj.config\n      );\n      encoderObj.encoder.configure(encoderObj.config);\n    });\n\n    const triggerWorker = new Worker(\"polyfills/triggerWorker.js\");\n    triggerWorker.postMessage({ frameRate: this.currentConfig.framerate });\n\n    const track = this.stream.getVideoTracks()[0];\n    console.log(\"Using video track:\", track);\n    this.videoProcessor = new MediaStreamTrackProcessor(\n      track,\n      triggerWorker,\n      true\n    );\n\n    const reader = this.videoProcessor.readable.getReader();\n    console.log(\"Video processor reader created:\", reader);\n\n    let frameCounter = 0;\n\n    const cameraEncoders = Array.from(this.videoEncoders.entries()).filter(\n      ([_, obj]) => obj.channelName.startsWith(\"cam\")\n    );\n\n    // Process video frames\n    (async () => {\n      try {\n        while (this.isPublishing) {\n          const result = await reader.read();\n\n          if (result.done) break;\n\n          const frame = result.value;\n\n          if (!window.videoBaseTimestamp) {\n            window.videoBaseTimestamp = frame.timestamp;\n          }\n\n          if (!this.cameraEnabled) {\n            console.log(\"Camera disabled, skipping frame\");\n            frame.close();\n            continue;\n          }\n\n          frameCounter++;\n          const keyFrame = frameCounter % 30 === 0;\n\n          for (let i = 0; i < cameraEncoders.length; i++) {\n            const [quality, encoderObj] = cameraEncoders[i];\n            const isLastEncoder = i === cameraEncoders.length - 1;\n\n            if (encoderObj.encoder.encodeQueueSize <= 2) {\n              const frameToEncode = isLastEncoder\n                ? frame\n                : new VideoFrame(frame);\n              encoderObj.encoder.encode(frameToEncode, { keyFrame });\n              frameToEncode.close();\n            }\n          }\n        }\n      } catch (error) {\n        this.onStatusUpdate(`Video processing error: ${error.message}`, true);\n        console.error(\"Video capture error:\", error);\n      }\n    })();\n  }\n\n  async startOpusAudioStreaming() {\n    if (!this.stream) {\n      throw new Error(\"No media stream available\");\n    }\n\n    const audioTrack = this.stream.getAudioTracks()[0];\n    if (!audioTrack) {\n      throw new Error(\"No audio track found in stream\");\n    }\n\n    const audioRecorderOptions = {\n      encoderApplication: 2051,\n      encoderComplexity: 0,\n      encoderFrameSize: 20,\n      timeSlice: 100,\n    };\n\n    const audioRecorder = await this.initAudioRecorder(\n      audioTrack,\n      audioRecorderOptions\n    );\n    audioRecorder.ondataavailable = (typedArray) =>\n      this.handleOpusAudioChunk(typedArray, \"mic_48k\");\n\n    await audioRecorder.start({\n      timeSlice: audioRecorderOptions.timeSlice,\n    });\n\n    return audioRecorder;\n  }\n\n  handleVideoChunk(chunk, metadata, quality, channelName) {\n    const encoderObj = this.videoEncoders.get(quality);\n    if (!encoderObj) return;\n\n    const streamData = this.publishStreams.get(channelName);\n    if (!streamData) return;\n\n    if (metadata && metadata.decoderConfig && !encoderObj.metadataReady) {\n      encoderObj.videoDecoderConfig = {\n        codec: metadata.decoderConfig.codec,\n        codedWidth: metadata.decoderConfig.codedWidth,\n        codedHeight: metadata.decoderConfig.codedHeight,\n        frameRate: this.currentConfig.framerate,\n        description: metadata.decoderConfig.description,\n      };\n      encoderObj.metadataReady = true;\n      console.warn(\n        \"Video config ready for\",\n        channelName,\n        encoderObj.videoDecoderConfig\n      );\n      this.sendStreamConfig(\n        channelName,\n        encoderObj.videoDecoderConfig,\n        \"video\"\n      );\n    }\n\n    if (!streamData.configSent) return;\n\n    const chunkData = new ArrayBuffer(chunk.byteLength);\n    chunk.copyTo(chunkData);\n    let type;\n    switch (channelName) {\n      case \"cam_360p\":\n        type = chunk.type === \"key\" ? 0 : 1;\n        break;\n      case \"cam_720p\":\n        type = chunk.type === \"key\" ? 2 : 3;\n        break;\n      case \"screen_share_1080p\":\n        type = chunk.type === \"key\" ? 4 : 5;\n        break;\n      default:\n        type = 8; // other\n    }\n    // const type = chunk.type === \"key\" ? \"video-key\" : \"video-delta\";\n\n    const packet = this.createPacketWithHeader(\n      chunkData,\n      chunk.timestamp,\n      type\n    );\n\n    this.sendOverStream(channelName, packet);\n    this.sequenceNumber++;\n  }\n\n  handleOpusAudioChunk(typedArray, channelName) {\n    if (!this.micEnabled) return;\n    if (!this.isChannelOpen || !typedArray || typedArray.byteLength === 0)\n      return;\n\n    const streamData = this.publishStreams.get(channelName);\n    if (!streamData) return;\n\n    try {\n      const dataArray = new Uint8Array(typedArray);\n      // Check for Opus header \"OggS\"\n      if (\n        dataArray.length >= 4 &&\n        dataArray[0] === 79 &&\n        dataArray[1] === 103 &&\n        dataArray[2] === 103 &&\n        dataArray[3] === 83\n      ) {\n        if (!streamData.configSent && !streamData.config) {\n          const description = this.createPacketWithHeader(\n            dataArray,\n            performance.now() * 1000,\n            6\n          );\n\n          const audioConfig = {\n            codec: \"opus\",\n            sampleRate: 48000,\n            numberOfChannels: 1,\n            description: description,\n          };\n\n          streamData.config = audioConfig;\n          this.sendStreamConfig(channelName, audioConfig, \"audio\");\n        }\n\n        // Initialize timing\n        if (this.opusBaseTime === 0 && window.videoBaseTimestamp) {\n          this.opusBaseTime = window.videoBaseTimestamp;\n          window.audioStartPerfTime = performance.now();\n          this.opusSamplesSent = 0;\n          this.opusChunkCount = 0;\n        } else if (this.opusBaseTime === 0 && !window.videoBaseTimestamp) {\n          this.opusBaseTime = performance.now() * 1000;\n          this.opusSamplesSent = 0;\n          this.opusChunkCount = 0;\n        }\n\n        const timestamp =\n          this.opusBaseTime +\n          Math.floor((this.opusSamplesSent * 1000000) / this.kSampleRate);\n\n        if (streamData.configSent) {\n          const packet = this.createPacketWithHeader(dataArray, timestamp, 6);\n\n          this.sendOverStream(channelName, packet);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to send audio data:\", error);\n    }\n  }\n\n  async sendStreamConfig(channelName, config, mediaType) {\n    const streamData = this.publishStreams.get(channelName);\n    if (!streamData || streamData.configSent) return;\n\n    try {\n      let configPacket;\n\n      if (mediaType === \"video\") {\n        const vConfigUint8 = new Uint8Array(config.description);\n        const vConfigBase64 = this.uint8ArrayToBase64(vConfigUint8);\n\n        configPacket = {\n          type: \"StreamConfig\",\n          channelName: channelName,\n          mediaType: \"video\",\n          config: {\n            codec: config.codec,\n            codedWidth: config.codedWidth,\n            codedHeight: config.codedHeight,\n            frameRate: config.frameRate,\n            quality: config.quality,\n            description: vConfigBase64,\n          },\n        };\n      } else if (mediaType === \"audio\") {\n        const aConfigBase64 = this.uint8ArrayToBase64(\n          new Uint8Array(config.description)\n        );\n\n        configPacket = {\n          type: \"StreamConfig\",\n          channelName: channelName,\n          mediaType: \"audio\",\n          config: {\n            codec: config.codec,\n            sampleRate: config.sampleRate,\n            numberOfChannels: config.numberOfChannels,\n            description: aConfigBase64,\n          },\n        };\n      }\n      console.log(\"send stream config\", configPacket);\n      const packet = new TextEncoder().encode(JSON.stringify(configPacket));\n      await this.sendOverStream(channelName, packet);\n\n      streamData.configSent = true;\n      streamData.config = config;\n\n      this.onStatusUpdate(`Config sent for stream: ${channelName}`);\n    } catch (error) {\n      console.error(`Failed to send config for ${channelName}:`, error);\n    }\n  }\n\n  createPacketWithHeader(data, timestamp, type) {\n    let adjustedTimestamp = timestamp;\n    if (window.videoBaseTimestamp) {\n      adjustedTimestamp = timestamp - window.videoBaseTimestamp;\n    }\n\n    let safeTimestamp = Math.floor(adjustedTimestamp / 1000);\n    if (safeTimestamp < 0) safeTimestamp = 0;\n\n    const HEADER_SIZE = 5;\n    const MAX_TS = 0xffffffff;\n    const MIN_TS = 0;\n\n    if (safeTimestamp > MAX_TS) safeTimestamp = MAX_TS;\n    if (safeTimestamp < MIN_TS) safeTimestamp = MIN_TS;\n\n    const packet = new Uint8Array(\n      HEADER_SIZE +\n      (data instanceof ArrayBuffer ? data.byteLength : data.length)\n    );\n    // type mapping\n    // video-360p-key = 0\n    // video-360p-delta = 1\n    // video-720p-key = 2\n    // video-720p-delta = 3\n    // video-1080p-key = 4\n    // video-1080p-delta = 5\n    // audio = 6\n    // config = 7\n    // other = 8\n\n    packet[4] = type;\n\n    const view = new DataView(packet.buffer, 0, 4);\n    view.setUint32(0, safeTimestamp, false);\n\n    packet.set(\n      data instanceof ArrayBuffer ? new Uint8Array(data) : data,\n      HEADER_SIZE\n    );\n\n    return packet;\n  }\n\n  uint8ArrayToBase64(bytes) {\n    let binary = \"\";\n    const chunkSize = 0x8000;\n    for (let i = 0; i < bytes.length; i += chunkSize) {\n      const chunk = bytes.subarray(i, i + chunkSize);\n      binary += String.fromCharCode.apply(null, chunk);\n    }\n    return btoa(binary);\n  }\n\n  /**\n   * Start screen sharing\n   */\n  async startShareScreen(stream) {\n    if (!stream) {\n      throw new Error(\"No stream provided for screen sharing\");\n    }\n\n    this.screenStream = stream;\n    this.isScreenSharing = true;\n\n    const channelName = \"screen_share_1080p\";\n\n    try {\n      // Create WebTransport stream for screen share\n      await this.createBidirectionalStream(channelName);\n\n      // Send start_share_screen event\n      const startEvent = {\n        type: \"start_share_screen\",\n        sender_stream_id: this.streamId,\n      };\n      await this.sendEvent(startEvent);\n\n      const videoTrack = stream.getVideoTracks()[0];\n      const audioTrack = stream.getAudioTracks()[0];\n\n      if (!videoTrack) {\n        throw new Error(\"No video track found in screen share stream\");\n      }\n\n      // Setup screen share video encoder\n      const screenConfig = this.subStreams.find(\n        (s) => s.channelName === channelName\n      );\n\n      const screenEncoder = new VideoEncoder({\n        output: (chunk, metadata) =>\n          this.handleScreenVideoChunk(chunk, metadata, channelName),\n        error: (e) =>\n          this.onStatusUpdate(`Screen encoder error: ${e.message}`, true),\n      });\n\n      const encoderConfig = {\n        codec: this.currentConfig.codec,\n        width: screenConfig.width,\n        height: screenConfig.height,\n        bitrate: screenConfig.bitrate,\n        framerate: screenConfig.framerate,\n        latencyMode: \"realtime\",\n        hardwareAcceleration: \"prefer-hardware\",\n      };\n\n      screenEncoder.configure(encoderConfig);\n\n      this.screenVideoEncoder = {\n        encoder: screenEncoder,\n        config: encoderConfig,\n        metadataReady: false,\n        videoDecoderConfig: null,\n      };\n\n      // Setup screen share audio if available\n      if (audioTrack) {\n        const audioRecorderOptions = {\n          encoderApplication: 2051,\n          encoderComplexity: 0,\n          encoderFrameSize: 20,\n          timeSlice: 100,\n        };\n\n        this.screenAudioRecorder = await this.initAudioRecorder(\n          audioTrack,\n          audioRecorderOptions\n        );\n\n        this.screenAudioRecorder.ondataavailable = (typedArray) =>\n          this.handleScreenAudioChunk(typedArray, channelName);\n\n        await this.screenAudioRecorder.start({\n          timeSlice: audioRecorderOptions.timeSlice,\n        });\n\n        this.screenAudioBaseTime = 0;\n        this.screenAudioSamplesSent = 0;\n      }\n\n      // Start video processing\n      const triggerWorker = new Worker(\"polyfills/triggerWorker.js\");\n      triggerWorker.postMessage({ frameRate: screenConfig.framerate });\n\n      this.screenVideoProcessor = new MediaStreamTrackProcessor(\n        videoTrack,\n        triggerWorker,\n        true\n      );\n\n      const reader = this.screenVideoProcessor.readable.getReader();\n      let frameCounter = 0;\n\n      // Handle video track ending\n      videoTrack.onended = () => {\n        this.stopShareScreen();\n      };\n\n      // Process screen share video frames\n      (async () => {\n        try {\n          while (this.isScreenSharing) {\n            const result = await reader.read();\n            if (result.done) break;\n\n            const frame = result.value;\n\n            if (!window.screenBaseTimestamp) {\n              window.screenBaseTimestamp = frame.timestamp;\n            }\n\n            frameCounter++;\n            const keyFrame = frameCounter % 30 === 0;\n\n            if (this.screenVideoEncoder.encoder.encodeQueueSize <= 2) {\n              this.screenVideoEncoder.encoder.encode(frame, { keyFrame });\n            }\n\n            frame.close();\n          }\n        } catch (error) {\n          this.onStatusUpdate(\n            `Screen share video error: ${error.message}`,\n            true\n          );\n          console.error(\"Screen share video error:\", error);\n        }\n      })();\n\n      this.onStatusUpdate(\"Screen sharing started\");\n    } catch (error) {\n      this.onStatusUpdate(\n        `Failed to start screen share: ${error.message}`,\n        true\n      );\n      this.stopShareScreen();\n      throw error;\n    }\n  }\n\n  /**\n   * Stop screen sharing\n   */\n  async stopShareScreen() {\n    if (!this.isScreenSharing) {\n      return;\n    }\n\n    try {\n      this.isScreenSharing = false;\n\n      const channelName = \"screen_share_1080p\";\n\n      // Send stop event to server\n      const stopEvent = {\n        type: \"stop_share_screen\",\n        sender_stream_id: this.streamId,\n      };\n      await this.sendEvent(stopEvent);\n\n      // Stop and close video encoder\n      if (this.screenVideoEncoder && this.screenVideoEncoder.encoder) {\n        if (this.screenVideoEncoder.encoder.state !== \"closed\") {\n          await this.screenVideoEncoder.encoder.flush();\n          this.screenVideoEncoder.encoder.close();\n        }\n        this.screenVideoEncoder = null;\n      }\n\n      // Stop audio recorder\n      if (\n        this.screenAudioRecorder &&\n        typeof this.screenAudioRecorder.stop === \"function\"\n      ) {\n        await this.screenAudioRecorder.stop();\n        this.screenAudioRecorder = null;\n      }\n\n      // Close screen share stream\n      const streamData = this.publishStreams.get(channelName);\n      if (streamData && streamData.writer) {\n        await streamData.writer.close();\n        this.publishStreams.delete(channelName);\n      }\n\n      // Stop all tracks in screen stream\n      if (this.screenStream) {\n        this.screenStream.getTracks().forEach((track) => track.stop());\n        this.screenStream = null;\n      }\n\n      // Reset state\n      this.screenAudioBaseTime = 0;\n      this.screenAudioSamplesSent = 0;\n      this.screenAudioConfig = null;\n      window.screenBaseTimestamp = null;\n\n      this.onStatusUpdate(\"Screen sharing stopped\");\n    } catch (error) {\n      this.onStatusUpdate(\n        `Error stopping screen share: ${error.message}`,\n        true\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Handle screen share video chunks\n   */\n  handleScreenVideoChunk(chunk, metadata, channelName) {\n    if (!this.screenVideoEncoder) return;\n\n    const streamData = this.publishStreams.get(channelName);\n    if (!streamData) return;\n\n    // Handle metadata\n    if (\n      metadata &&\n      metadata.decoderConfig &&\n      !this.screenVideoEncoder.metadataReady\n    ) {\n      this.screenVideoEncoder.videoDecoderConfig = {\n        codec: metadata.decoderConfig.codec,\n        codedWidth: metadata.decoderConfig.codedWidth,\n        codedHeight: metadata.decoderConfig.codedHeight,\n        frameRate: this.screenVideoEncoder.config.framerate,\n        description: metadata.decoderConfig.description,\n      };\n      this.screenVideoEncoder.metadataReady = true;\n\n      console.log(\n        \"Screen video config ready:\",\n        this.screenVideoEncoder.videoDecoderConfig\n      );\n\n      this.sendScreenDecoderConfigs(channelName);\n    }\n\n    if (!streamData.configSent) return;\n\n    const chunkData = new ArrayBuffer(chunk.byteLength);\n    chunk.copyTo(chunkData);\n    const type = chunk.type === \"key\" ? 4 : 5; // screen_share_1080p key/delta\n\n    const packet = this.createPacketWithHeader(\n      chunkData,\n      chunk.timestamp,\n      type\n    );\n\n    this.sendOverStream(channelName, packet);\n  }\n\n  /**\n   * Handle screen share audio chunks\n   */\n  handleScreenAudioChunk(typedArray, channelName) {\n    if (!this.isScreenSharing || !typedArray || typedArray.byteLength === 0)\n      return;\n\n    const streamData = this.publishStreams.get(channelName);\n    if (!streamData) return;\n\n    try {\n      const dataArray = new Uint8Array(typedArray);\n\n      // Check for Opus header\n      if (\n        dataArray.length >= 4 &&\n        dataArray[0] === 79 &&\n        dataArray[1] === 103 &&\n        dataArray[2] === 103 &&\n        dataArray[3] === 83\n      ) {\n        if (!this.screenAudioConfig) {\n          const description = this.createPacketWithHeader(\n            dataArray,\n            performance.now() * 1000,\n            6\n          );\n\n          this.screenAudioConfig = {\n            codec: \"opus\",\n            sampleRate: 48000,\n            numberOfChannels: 2,\n            description: description,\n          };\n\n          console.log(\"Screen audio config ready:\", this.screenAudioConfig);\n          this.sendScreenDecoderConfigs(channelName);\n        }\n\n        // Initialize timing\n        if (this.screenAudioBaseTime === 0 && window.screenBaseTimestamp) {\n          this.screenAudioBaseTime = window.screenBaseTimestamp;\n          this.screenAudioSamplesSent = 0;\n        } else if (\n          this.screenAudioBaseTime === 0 &&\n          !window.screenBaseTimestamp\n        ) {\n          this.screenAudioBaseTime = performance.now() * 1000;\n          this.screenAudioSamplesSent = 0;\n        }\n\n        const timestamp =\n          this.screenAudioBaseTime +\n          Math.floor((this.screenAudioSamplesSent * 1000000) / 48000);\n\n        if (streamData.configSent) {\n          const packet = this.createPacketWithHeader(dataArray, timestamp, 6);\n          this.sendOverStream(channelName, packet);\n        }\n\n        this.screenAudioSamplesSent += 960;\n      }\n    } catch (error) {\n      console.error(\"Failed to send screen audio data:\", error);\n    }\n  }\n\n  /**\n   * Send screen share decoder configs\n   */\n  async sendScreenDecoderConfigs(channelName) {\n    const streamData = this.publishStreams.get(channelName);\n    if (!streamData || streamData.configSent) return;\n\n    const hasAudio = this.screenAudioRecorder !== null;\n    const videoReady =\n      this.screenVideoEncoder && this.screenVideoEncoder.metadataReady;\n    const audioReady = !hasAudio || this.screenAudioConfig;\n\n    if (!videoReady || !audioReady) {\n      return;\n    }\n\n    try {\n      const vConfigUint8 = new Uint8Array(\n        this.screenVideoEncoder.videoDecoderConfig.description\n      );\n      const vConfigBase64 = this.uint8ArrayToBase64(vConfigUint8);\n\n      const config = {\n        type: \"DecoderConfigs\",\n        channelName: channelName,\n        videoConfig: {\n          codec: this.screenVideoEncoder.videoDecoderConfig.codec,\n          codedWidth: this.screenVideoEncoder.videoDecoderConfig.codedWidth,\n          codedHeight: this.screenVideoEncoder.videoDecoderConfig.codedHeight,\n          frameRate: this.screenVideoEncoder.videoDecoderConfig.frameRate,\n          description: vConfigBase64,\n        },\n      };\n\n      if (this.screenAudioConfig) {\n        const aConfigBase64 = this.uint8ArrayToBase64(\n          new Uint8Array(this.screenAudioConfig.description)\n        );\n\n        config.audioConfig = {\n          codec: this.screenAudioConfig.codec,\n          sampleRate: this.screenAudioConfig.sampleRate,\n          numberOfChannels: this.screenAudioConfig.numberOfChannels,\n          description: aConfigBase64,\n        };\n      }\n\n      console.log(\"Sending screen share decoder configs:\", config);\n      const packet = new TextEncoder().encode(JSON.stringify(config));\n      await this.sendOverStream(channelName, packet);\n\n      streamData.configSent = true;\n      this.onStatusUpdate(`Screen share configs sent for: ${channelName}`);\n    } catch (error) {\n      console.error(`Failed to send screen share configs:`, error);\n    }\n  }\n\n  async stop() {\n    if (!this.isPublishing) {\n      return;\n    }\n\n    try {\n      this.isPublishing = false;\n\n      // Stop screen sharing if active\n      if (this.isScreenSharing) {\n        await this.stopShareScreen();\n      }\n\n      // Close video encoders\n      for (const [quality, encoderObj] of this.videoEncoders) {\n        if (encoderObj.encoder && encoderObj.encoder.state !== \"closed\") {\n          await encoderObj.encoder.flush();\n          encoderObj.encoder.close();\n        }\n      }\n      this.videoEncoders.clear();\n\n      // Stop audio processor\n      if (\n        this.audioProcessor &&\n        typeof this.audioProcessor.stop === \"function\"\n      ) {\n        await this.audioProcessor.stop();\n        this.audioProcessor = null;\n      }\n\n      // Close all streams\n      for (const [channelName, streamData] of this.publishStreams) {\n        if (streamData.writer) {\n          await streamData.writer.close();\n        }\n      }\n      this.publishStreams.clear();\n\n      // Close event stream\n      if (this.eventStream && this.eventStream.writer) {\n        await this.eventStream.writer.close();\n        this.eventStream = null;\n      }\n\n      // Close WebTransport\n      if (this.webTransport) {\n        this.webTransport.close();\n        this.webTransport = null;\n      }\n\n      // Stop all tracks\n      if (this.stream) {\n        this.stream.getTracks().forEach((track) => track.stop());\n        this.stream = null;\n      }\n\n      // Reset state\n      this.isChannelOpen = false;\n      this.sequenceNumber = 0;\n      this.opusBaseTime = 0;\n      this.opusSamplesSent = 0;\n      this.opusChunkCount = 0;\n\n      // Clear global variables\n      window.videoBaseTimestamp = null;\n      window.audioStartPerfTime = null;\n\n      this.onStreamStop();\n      this.onStatusUpdate(\"Publishing stopped\");\n    } catch (error) {\n      this.onStatusUpdate(`Error stopping publishing: ${error.message}`, true);\n      throw error;\n    }\n  }\n\n  // Getters for state\n  get isActive() {\n    return this.isPublishing;\n  }\n\n  get streamInfo() {\n    return {\n      streamType: this.streamType,\n      config: this.currentConfig,\n      sequenceNumber: this.sequenceNumber,\n      activeStreams: Array.from(this.publishStreams.keys()),\n    };\n  }\n}\n","import EventEmitter from \"../events/EventEmitter.js\";\n\n/**\n * Enhanced Subscriber class for receiving media streams\n * Refactored from EnhancedSubscriber with better structure\n */\nclass Subscriber extends EventEmitter {\n  constructor(config) {\n    super();\n\n    // Configuration\n    this.streamId = config.streamId || \"\";\n    this.roomId = config.roomId || \"\";\n    this.host = config.host || \"stream-gate.bandia.vn\";\n    this.isOwnStream = config.isOwnStream || false;\n\n    // Media configuration\n    this.mediaWorkerUrl = config.mediaWorkerUrl || \"workers/media-worker-ab.js\";\n    this.audioWorkletUrl =\n      config.audioWorkletUrl || \"workers/audio-worklet1.js\";\n    this.mstgPolyfillUrl =\n      config.mstgPolyfillUrl || \"polyfills/MSTG_polyfill.js\";\n\n    // State\n    this.isStarted = false;\n    this.isAudioEnabled = true;\n    this.connectionStatus = \"disconnected\"; // 'disconnected', 'connecting', 'connected', 'failed'\n\n    // Media components\n    this.worker = null;\n    this.audioWorkletNode = null;\n    this.videoGenerator = null;\n    this.videoWriter = null;\n    this.mediaStream = null;\n\n    // Unique subscriber ID\n    this.subscriberId = `subscriber_${this.streamId}_${Date.now()}`;\n\n    // Audio mixer reference (will be set externally)\n    this.audioMixer = null;\n  }\n\n  /**\n   * Start the subscriber\n   */\n  async start() {\n    if (this.isStarted) {\n      throw new Error(\"Subscriber already started\");\n    }\n\n    try {\n      console.log(\"Starting subscriber:\", this.subscriberId);\n      this.emit(\"starting\", { subscriber: this });\n      this._updateConnectionStatus(\"connecting\");\n\n      const channel = new MessageChannel();\n\n      await this._loadPolyfill();\n      await this._initWorker(channel.port2);\n      await this._initAudioSystem(channel.port1);\n      this._initVideoSystem();\n\n      this.isStarted = true;\n      this._updateConnectionStatus(\"connected\");\n      this.emit(\"started\", { subscriber: this });\n    } catch (error) {\n      this._updateConnectionStatus(\"failed\");\n      this.emit(\"error\", { subscriber: this, error, action: \"start\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the subscriber\n   */\n  stop() {\n    if (!this.isStarted) {\n      return;\n    }\n\n    try {\n      this.emit(\"stopping\", { subscriber: this });\n\n      // Remove from audio mixer\n      if (this.audioMixer) {\n        this.audioMixer.removeSubscriber(this.subscriberId);\n      }\n\n      // Terminate worker\n      if (this.worker) {\n        this.worker.terminate();\n        this.worker = null;\n      }\n\n      // Emit stream removal event for app integration\n      if (this.mediaStream) {\n        this.emit(\"streamRemoved\", {\n          streamId: this.streamId,\n          subscriberId: this.subscriberId,\n          roomId: this.roomId\n        });\n      }\n\n      // Close video components\n      this._cleanupVideoSystem();\n\n      // Clear references\n      this.audioWorkletNode = null;\n      this.mediaStream = null;\n\n      this.isStarted = false;\n      this._updateConnectionStatus(\"disconnected\");\n      this.emit(\"stopped\", { subscriber: this });\n    } catch (error) {\n      this.emit(\"error\", { subscriber: this, error, action: \"stop\" });\n    }\n  }\n\n  /**\n   * Toggle audio on/off\n   */\n  async toggleAudio() {\n    if (!this.isStarted || !this.worker) {\n      throw new Error(\"Subscriber not started\");\n    }\n\n    try {\n      this.worker.postMessage({ type: \"toggleAudio\" });\n      this.isAudioEnabled = !this.isAudioEnabled;\n\n      this.emit(\"audioToggled\", {\n        subscriber: this,\n        enabled: this.isAudioEnabled,\n      });\n\n      return this.isAudioEnabled;\n    } catch (error) {\n      this.emit(\"error\", { subscriber: this, error, action: \"toggleAudio\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Set audio mixer reference\n   */\n  setAudioMixer(audioMixer) {\n    this.audioMixer = audioMixer;\n  }\n\n  /**\n   * Get subscriber info\n   */\n  getInfo() {\n    return {\n      subscriberId: this.subscriberId,\n      streamId: this.streamId,\n      roomId: this.roomId,\n      host: this.host,\n      isOwnStream: this.isOwnStream,\n      isStarted: this.isStarted,\n      isAudioEnabled: this.isAudioEnabled,\n      connectionStatus: this.connectionStatus,\n    };\n  }\n\n  /**\n   * Load MediaStreamTrackGenerator polyfill if needed\n   */\n  async _loadPolyfill() {\n    if (!window.MediaStreamTrackGenerator) {\n      try {\n        await import(this.mstgPolyfillUrl);\n      } catch (error) {\n        console.warn(\"Failed to load MSTG polyfill:\", error);\n      }\n    }\n  }\n\n  /**\n   * Initialize media worker\n   */\n  async _initWorker(channelPort) {\n    try {\n      this.worker = new Worker(`${this.mediaWorkerUrl}?t=${Date.now()}`, {\n        type: \"module\",\n      });\n\n      this.worker.onmessage = (e) => this._handleWorkerMessage(e);\n      this.worker.onerror = (error) => {\n        this.emit(\"error\", {\n          subscriber: this,\n          error: new Error(`Media Worker error: ${error.message}`),\n          action: \"workerError\",\n        });\n      };\n\n      const mediaUrl = `wss://sfu-adaptive-bitrate.ermis-network.workers.dev/meeting/${this.roomId}/${this.streamId}`;\n      console.log(\"try to init worker with url:\", mediaUrl);\n\n      this.worker.postMessage(\n        {\n          type: \"init\",\n          data: { mediaUrl },\n          port: channelPort,\n          quality: \"360p\", // default quality\n        },\n        [channelPort]\n      );\n    } catch (error) {\n      throw new Error(`Worker initialization failed: ${error.message}`);\n    }\n  }\n\n  switchBitrate(quality) {\n    // 360p | 720p\n    if (this.worker) {\n      this.worker.postMessage({\n        type: \"switchBitrate\",\n        quality,\n      });\n    }\n  }\n\n  /**\n   * Initialize audio system with mixer\n   */\n  async _initAudioSystem(channelPort) {\n    try {\n      // Skip audio setup for own stream to prevent echo\n      if (this.isOwnStream) {\n        this.emit(\"audioSkipped\", {\n          subscriber: this,\n          reason: \"Own stream - preventing echo\",\n        });\n        return;\n      }\n\n      // Audio mixer should be set externally before starting\n      if (this.audioMixer) {\n        console.warn(\n          \"Adding subscriber to audio mixer in new subscriber:\",\n          this.subscriberId\n        );\n        this.audioWorkletNode = await this.audioMixer.addSubscriber(\n          this.subscriberId,\n          this.audioWorkletUrl,\n          this.isOwnStream,\n          channelPort\n        );\n\n        if (this.audioWorkletNode) {\n          this.audioWorkletNode.port.onmessage = (event) => {\n            const { type, bufferMs, isPlaying, newBufferSize } = event.data;\n            this.emit(\"audioStatus\", {\n              subscriber: this,\n              type,\n              bufferMs,\n              isPlaying,\n              newBufferSize,\n            });\n          };\n        }\n      }\n\n      this.emit(\"audioInitialized\", { subscriber: this });\n    } catch (error) {\n      throw new Error(`Audio system initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Initialize video system\n   */\n  _initVideoSystem() {\n    try {\n      if (typeof MediaStreamTrackGenerator === \"function\") {\n        this.videoGenerator = new MediaStreamTrackGenerator({\n          kind: \"video\",\n        });\n      } else {\n        throw new Error(\n          \"MediaStreamTrackGenerator not supported in this browser\"\n        );\n      }\n\n      this.videoWriter = this.videoGenerator.writable;\n\n      // Create MediaStream with video track only\n      this.mediaStream = new MediaStream([this.videoGenerator]);\n\n      // Emit remote stream ready event for app integration\n      this.emit(\"remoteStreamReady\", {\n        stream: this.mediaStream,\n        streamId: this.streamId,\n        subscriberId: this.subscriberId,\n        roomId: this.roomId,\n        isOwnStream: this.isOwnStream\n      });\n      this.emit(\"videoInitialized\", { subscriber: this });\n    } catch (error) {\n      throw new Error(`Video system initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Cleanup video system\n   */\n  _cleanupVideoSystem() {\n    try {\n      // Close video writer\n      if (this.videoWriter) {\n        try {\n          const writer = this.videoWriter.getWriter();\n          writer.releaseLock();\n        } catch (e) {\n          // Writer might already be released\n        }\n        this.videoWriter = null;\n      }\n\n      // Stop video generator\n      if (this.videoGenerator) {\n        try {\n          if (this.videoGenerator.stop) {\n            this.videoGenerator.stop();\n          }\n        } catch (e) {\n          // Generator might already be stopped\n        }\n        this.videoGenerator = null;\n      }\n    } catch (error) {\n      console.warn(\"Error cleaning video system:\", error);\n    }\n  }\n\n  /**\n   * Handle messages from media worker\n   */\n  _handleWorkerMessage(e) {\n    const {\n      type,\n      frame,\n      message,\n      channelData,\n      sampleRate,\n      numberOfChannels,\n      timeStamp,\n      subscriberId,\n      audioEnabled,\n    } = e.data;\n\n    switch (type) {\n      case \"videoData\":\n        this._handleVideoData(frame);\n        break;\n\n      case \"status\":\n        this.emit(\"status\", { subscriber: this, message, isError: false });\n        break;\n\n      case \"error\":\n        this.emit(\"status\", { subscriber: this, message, isError: true });\n        this.emit(\"error\", {\n          subscriber: this,\n          error: new Error(message),\n          action: \"workerMessage\",\n        });\n        break;\n\n      case \"audio-toggled\":\n        this.emit(\"audioToggled\", {\n          subscriber: this,\n          enabled: audioEnabled,\n        });\n        break;\n\n      case \"skipping\":\n        this.emit(\"frameSkipped\", { subscriber: this });\n        break;\n\n      case \"resuming\":\n        this.emit(\"frameResumed\", { subscriber: this });\n        break;\n\n      default:\n        console.log(`Unknown worker message type: ${type}`, e.data);\n    }\n  }\n\n  /**\n   * Handle video data from worker\n   */\n  async _handleVideoData(frame) {\n    if (this.videoWriter && frame) {\n      try {\n        const writer = this.videoWriter.getWriter();\n        await writer.write(frame);\n        writer.releaseLock();\n\n        this.emit(\"videoFrameProcessed\", { subscriber: this });\n      } catch (error) {\n        this.emit(\"error\", {\n          subscriber: this,\n          error: new Error(`Video write error: ${error.message}`),\n          action: \"videoWrite\",\n        });\n      }\n    }\n  }\n\n  /**\n   * Update connection status\n   */\n  _updateConnectionStatus(status) {\n    if (this.connectionStatus === status) return;\n\n    const previousStatus = this.connectionStatus;\n    this.connectionStatus = status;\n\n    this.emit(\"connectionStatusChanged\", {\n      subscriber: this,\n      status,\n      previousStatus,\n    });\n  }\n}\n\nexport default Subscriber;\n","/**\n * AudioMixer Class for combining multiple subscriber audio streams\n * Provides centralized audio mixing and playback management\n */\nclass AudioMixer {\n  constructor(config = {}) {\n    this.audioContext = null;\n    this.mixerNode = null;\n    this.outputDestination = null;\n    this.subscriberNodes = new Map(); // subscriberId -> AudioWorkletNode\n    this.isInitialized = false;\n    this.outputAudioElement = null;\n\n    // Configuration\n    this.masterVolume = config.masterVolume || 0.8;\n    this.sampleRate = config.sampleRate || 48000;\n    this.bufferSize = config.bufferSize || 256;\n    this.enableEchoCancellation = config.enableEchoCancellation !== false;\n    this.debug = config.debug || false;\n  }\n\n  /**\n   * Initialize the audio mixer\n   */\n  async initialize() {\n    if (this.isInitialized) {\n      this._debug(\"AudioMixer already initialized\");\n      return;\n    }\n\n    try {\n      // Create shared AudioContext\n      this.audioContext = new (window.AudioContext ||\n        window.webkitAudioContext)({\n        sampleRate: this.sampleRate,\n        latencyHint: \"interactive\",\n      });\n\n      // Resume context if suspended (required by some browsers)\n      if (this.audioContext.state === \"suspended\") {\n        await this.audioContext.resume();\n      }\n\n      // Create mixer node (GainNode to combine audio)\n      this.mixerNode = this.audioContext.createGain();\n      this.mixerNode.gain.value = this.masterVolume;\n\n      // Create output destination\n      this.outputDestination = this.audioContext.createMediaStreamDestination();\n      this.mixerNode.connect(this.outputDestination);\n\n      // Create hidden audio element for mixed audio playback\n      this.outputAudioElement = document.createElement(\"audio\");\n      this.outputAudioElement.autoplay = true;\n      this.outputAudioElement.style.display = \"none\";\n      this.outputAudioElement.setAttribute(\"playsinline\", \"\");\n\n      // Disable echo cancellation on output element\n      if (this.enableEchoCancellation) {\n        this.outputAudioElement.setAttribute(\"webkitAudioContext\", \"true\");\n      }\n\n      document.body.appendChild(this.outputAudioElement);\n\n      this.isInitialized = true;\n      this._debug(\"AudioMixer initialized successfully\");\n\n      // Setup error handlers\n      this._setupErrorHandlers();\n    } catch (error) {\n      console.error(\"Failed to initialize AudioMixer:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add a subscriber's audio stream to the mixer\n   */\n  async addSubscriber(\n    subscriberId,\n    audioWorkletUrl,\n    isOwnAudio = false,\n    channelWorkletPort\n  ) {\n    console.warn(`Adding subscriber ${subscriberId} to audio mixer`);\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    // Skip adding own audio to prevent echo/feedback\n    if (isOwnAudio) {\n      this._debug(\n        `Skipping own audio for subscriber ${subscriberId} to prevent echo`\n      );\n      return null;\n    }\n\n    // Check if subscriber already exists\n    if (this.subscriberNodes.has(subscriberId)) {\n      this._debug(`Subscriber ${subscriberId} already exists in mixer`);\n      return this.subscriberNodes.get(subscriberId);\n    }\n\n    try {\n      // Load audio worklet if not already loaded\n      await this._loadAudioWorklet(audioWorkletUrl);\n\n      // Create AudioWorkletNode for this subscriber\n      const workletNode = new AudioWorkletNode(\n        this.audioContext,\n        \"jitter-resistant-processor\",\n        {\n          numberOfInputs: 0,\n          numberOfOutputs: 1,\n          outputChannelCount: [2],\n        }\n      );\n\n      // Connect the port if provided\n      if (channelWorkletPort) {\n        workletNode.port.postMessage(\n          { type: \"connectWorker\", port: channelWorkletPort },\n          [channelWorkletPort]\n        );\n      }\n\n      // Create gain node for individual volume control\n      const gainNode = this.audioContext.createGain();\n      gainNode.gain.value = 1.0;\n\n      // Connect: workletNode -> gainNode -> mixerNode\n      workletNode.connect(gainNode);\n      gainNode.connect(this.mixerNode);\n\n      // Store reference with gain node\n      this.subscriberNodes.set(subscriberId, {\n        workletNode,\n        gainNode,\n        isActive: true,\n        addedAt: Date.now(),\n      });\n\n      // Update audio element source with mixed stream\n      this._updateOutputAudio();\n\n      // Setup message handler\n      this._setupWorkletMessageHandler(subscriberId, workletNode);\n\n      this._debug(`Added subscriber ${subscriberId} to audio mixer`);\n      return workletNode;\n    } catch (error) {\n      console.error(\n        `Failed to add subscriber ${subscriberId} to mixer:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Remove a subscriber from the mixer\n   */\n  removeSubscriber(subscriberId) {\n    const subscriberData = this.subscriberNodes.get(subscriberId);\n    if (!subscriberData) {\n      this._debug(`Subscriber ${subscriberId} not found in mixer`);\n      return false;\n    }\n\n    try {\n      const { workletNode, gainNode } = subscriberData;\n\n      // Disconnect nodes\n      workletNode.disconnect();\n      gainNode.disconnect();\n\n      // Remove from map\n      this.subscriberNodes.delete(subscriberId);\n\n      // Update audio element if no more subscribers\n      this._updateOutputAudio();\n\n      this._debug(`Removed subscriber ${subscriberId} from audio mixer`);\n      return true;\n    } catch (error) {\n      console.error(`Failed to remove subscriber ${subscriberId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Set volume for a specific subscriber\n   */\n  setSubscriberVolume(subscriberId, volume) {\n    const subscriberData = this.subscriberNodes.get(subscriberId);\n    if (!subscriberData) {\n      this._debug(`Subscriber ${subscriberId} not found for volume adjustment`);\n      return false;\n    }\n\n    try {\n      const normalizedVolume = Math.max(0, Math.min(1, volume));\n      subscriberData.gainNode.gain.value = normalizedVolume;\n\n      this._debug(\n        `Set volume for subscriber ${subscriberId}: ${normalizedVolume}`\n      );\n      return true;\n    } catch (error) {\n      console.error(\n        `Failed to set volume for subscriber ${subscriberId}:`,\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Mute/unmute a specific subscriber\n   */\n  setSubscriberMuted(subscriberId, muted) {\n    return this.setSubscriberVolume(subscriberId, muted ? 0 : 1);\n  }\n\n  /**\n   * Set master volume for all mixed audio\n   */\n  setMasterVolume(volume) {\n    if (!this.mixerNode) return false;\n\n    try {\n      const normalizedVolume = Math.max(0, Math.min(1, volume));\n      this.mixerNode.gain.value = normalizedVolume;\n      this.masterVolume = normalizedVolume;\n\n      this._debug(`Set master volume: ${normalizedVolume}`);\n      return true;\n    } catch (error) {\n      console.error(\"Failed to set master volume:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get mixed audio output stream\n   */\n  getOutputMediaStream() {\n    if (!this.outputDestination) {\n      this._debug(\"Output destination not initialized\");\n      return null;\n    }\n    return this.outputDestination.stream;\n  }\n\n  /**\n   * Get current mixer statistics\n   */\n  getStats() {\n    return {\n      isInitialized: this.isInitialized,\n      subscriberCount: this.subscriberNodes.size,\n      masterVolume: this.masterVolume,\n      audioContextState: this.audioContext?.state || \"not-initialized\",\n      sampleRate: this.audioContext?.sampleRate || 0,\n      subscribers: Array.from(this.subscriberNodes.entries()).map(\n        ([id, data]) => ({\n          id,\n          volume: data.gainNode.gain.value,\n          isActive: data.isActive,\n          addedAt: data.addedAt,\n        })\n      ),\n    };\n  }\n\n  /**\n   * Get list of subscriber IDs\n   */\n  getSubscriberIds() {\n    return Array.from(this.subscriberNodes.keys());\n  }\n\n  /**\n   * Check if subscriber exists in mixer\n   */\n  hasSubscriber(subscriberId) {\n    return this.subscriberNodes.has(subscriberId);\n  }\n\n  /**\n   * Suspend audio context (for battery saving)\n   */\n  async suspend() {\n    if (this.audioContext && this.audioContext.state === \"running\") {\n      await this.audioContext.suspend();\n      this._debug(\"Audio context suspended\");\n    }\n  }\n\n  /**\n   * Resume audio context\n   */\n  async resume() {\n    if (this.audioContext && this.audioContext.state === \"suspended\") {\n      await this.audioContext.resume();\n      this._debug(\"Audio context resumed\");\n    }\n  }\n\n  /**\n   * Cleanup mixer resources\n   */\n  async cleanup() {\n    this._debug(\"Starting AudioMixer cleanup\");\n\n    try {\n      // Remove audio element\n      if (this.outputAudioElement) {\n        this.outputAudioElement.srcObject = null;\n        if (this.outputAudioElement.parentNode) {\n          this.outputAudioElement.parentNode.removeChild(\n            this.outputAudioElement\n          );\n        }\n        this.outputAudioElement = null;\n      }\n\n      // Disconnect all subscribers\n      for (const [subscriberId, subscriberData] of this.subscriberNodes) {\n        try {\n          const { workletNode, gainNode } = subscriberData;\n          workletNode.disconnect();\n          gainNode.disconnect();\n        } catch (error) {\n          console.error(\n            `Error disconnecting subscriber ${subscriberId}:`,\n            error\n          );\n        }\n      }\n      this.subscriberNodes.clear();\n\n      // Disconnect mixer components\n      if (this.mixerNode) {\n        this.mixerNode.disconnect();\n        this.mixerNode = null;\n      }\n\n      if (this.outputDestination) {\n        this.outputDestination = null;\n      }\n\n      // Close audio context\n      if (this.audioContext && this.audioContext.state !== \"closed\") {\n        await this.audioContext.close();\n      }\n\n      // Reset state\n      this.audioContext = null;\n      this.isInitialized = false;\n\n      this._debug(\"AudioMixer cleanup completed\");\n    } catch (error) {\n      console.error(\"Error during AudioMixer cleanup:\", error);\n    }\n  }\n\n  /**\n   * Load audio worklet module\n   */\n  async _loadAudioWorklet(audioWorkletUrl) {\n    console.warn(\"Loading audio worklet from:\", audioWorkletUrl);\n    try {\n      await this.audioContext.audioWorklet.addModule(audioWorkletUrl);\n      this._debug(\"Audio worklet loaded:\", audioWorkletUrl);\n    } catch (error) {\n      // Worklet might already be loaded\n      if (!error.message.includes(\"already been loaded\")) {\n        this._debug(\"Audio worklet load warning:\", error.message);\n      }\n    }\n  }\n\n  /**\n   * Update output audio element\n   */\n  _updateOutputAudio() {\n    if (!this.outputAudioElement || !this.outputDestination) return;\n\n    try {\n      if (this.subscriberNodes.size > 0) {\n        this.outputAudioElement.srcObject = this.outputDestination.stream;\n      } else {\n        this.outputAudioElement.srcObject = null;\n      }\n    } catch (error) {\n      console.error(\"Failed to update output audio:\", error);\n    }\n  }\n\n  /**\n   * Setup message handler for worklet node\n   */\n  _setupWorkletMessageHandler(subscriberId, workletNode) {\n    workletNode.port.onmessage = (event) => {\n      const { type, bufferMs, isPlaying, newBufferSize, error } = event.data;\n\n      switch (type) {\n        case \"bufferStatus\":\n          this._debug(\n            `Subscriber ${subscriberId} buffer: ${bufferMs}ms, playing: ${isPlaying}`\n          );\n          break;\n        case \"bufferSizeChanged\":\n          this._debug(\n            `Subscriber ${subscriberId} buffer size changed: ${newBufferSize}`\n          );\n          break;\n        case \"error\":\n          console.error(`Subscriber ${subscriberId} worklet error:`, error);\n          break;\n        default:\n          this._debug(\n            `Subscriber ${subscriberId} worklet message:`,\n            event.data\n          );\n      }\n    };\n\n    workletNode.port.onerror = (error) => {\n      console.error(`Subscriber ${subscriberId} worklet port error:`, error);\n    };\n  }\n\n  /**\n   * Setup error handlers for audio context\n   */\n  _setupErrorHandlers() {\n    if (!this.audioContext) return;\n\n    this.audioContext.onstatechange = () => {\n      this._debug(`Audio context state changed: ${this.audioContext.state}`);\n\n      if (this.audioContext.state === \"interrupted\") {\n        console.warn(\"Audio context was interrupted\");\n      }\n    };\n\n    // Listen for audio context suspend/resume events\n    document.addEventListener(\"visibilitychange\", async () => {\n      if (document.hidden) {\n        // Page hidden - optionally suspend context\n        // await this.suspend();\n      } else {\n        // Page visible - resume context if needed\n        await this.resume();\n      }\n    });\n  }\n\n  /**\n   * Debug logging\n   */\n  _debug(...args) {\n    if (this.debug) {\n      console.log(\"[AudioMixer]\", ...args);\n    }\n  }\n\n  /**\n   * Sleep utility for delays\n   */\n  _sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\nexport default AudioMixer;\n","import EventEmitter from \"../events/EventEmitter.js\";\nimport Participant from \"./Participant.js\";\n\nimport Publisher from \"../media/Publisher.js\";\nimport Subscriber from \"../media/Subscriber.js\";\nimport AudioMixer from \"../media/AudioMixer.js\";\n\n/**\n * Represents a meeting room\n */\nclass Room extends EventEmitter {\n  constructor(config) {\n    super();\n\n    this.id = config.id;\n    this.name = config.name;\n    this.code = config.code;\n    this.type = config.type || \"main\"; // 'main', 'breakout'\n    this.parentRoomId = config.parentRoomId || null;\n    this.ownerId = config.ownerId;\n    this.isActive = false;\n\n    // Configuration\n    this.apiClient = config.apiClient;\n    this.mediaConfig = config.mediaConfig;\n\n    // Participants management\n    this.participants = new Map(); // userId -> Participant\n    this.localParticipant = null;\n\n    // Sub rooms (for main rooms only)\n    this.subRooms = new Map(); // subRoomId -> Room\n\n    // Media management\n    this.audioMixer = null;\n    this.pinnedParticipant = null;\n\n    // Connection info\n    this.membershipId = null;\n    this.streamId = null;\n\n    // Chat management\n    this.messages = [];\n    this.typingUsers = new Map();\n  }\n\n  /**\n   * Join this room\n   */\n  async join(userId) {\n    if (this.isActive) {\n      throw new Error(\"Already joined this room\");\n    }\n\n    try {\n      this.emit(\"joining\", { room: this });\n      console.log(\"Joining room with code\", this.code);\n      // Join via API\n      const joinResponse = await this.apiClient.joinRoom(this.code);\n\n      // Store connection info\n      this.id = joinResponse.room_id;\n      this.membershipId = joinResponse.id;\n      this.streamId = joinResponse.stream_id;\n\n      // Get room details and members\n      const roomDetails = await this.apiClient.getRoomById(\n        joinResponse.room_id\n      );\n      console.log(\"Joined room, details:\", roomDetails);\n\n      // Update room info\n      this._updateFromApiData(roomDetails.room);\n\n      // Setup participants\n      await this._setupParticipants(roomDetails.participants, userId);\n\n      // Setup media connections\n      await this._setupMediaConnections();\n\n      this.isActive = true;\n      this.emit(\"joined\", { room: this, participants: this.participants });\n\n      return {\n        room: this,\n        localParticipant: this.localParticipant,\n        participants: Array.from(this.participants.values()),\n      };\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"join\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Leave this room\n   */\n  async leave() {\n    if (!this.isActive) {\n      return;\n    }\n\n    try {\n      this.emit(\"leaving\", { room: this });\n\n      // Cleanup media connections\n      await this._cleanupMediaConnections();\n\n      // Cleanup participants\n      this._cleanupParticipants();\n\n      // Leave via API\n      if (this.membershipId) {\n        await this.apiClient.leaveRoom(this.id, this.membershipId);\n      }\n\n      this.isActive = false;\n      this.emit(\"left\", { room: this });\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"leave\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Create a sub room (main room only)\n   */\n  async createSubRoom(config) {\n    if (this.type !== \"main\") {\n      throw new Error(\"Only main rooms can create sub rooms\");\n    }\n\n    try {\n      this.emit(\"creatingSubRoom\", { room: this, config });\n\n      // Create sub room via API\n      const subRoomData = await this.apiClient.createSubRoom(\n        this.id,\n        config.name,\n        config.type || \"breakout\"\n      );\n\n      // Create sub room instance\n      const subRoom = new Room({\n        id: subRoomData.id,\n        name: subRoomData.room_name,\n        code: subRoomData.room_code,\n        type: config.type || \"breakout\",\n        parentRoomId: this.id,\n        ownerId: subRoomData.user_id,\n        apiClient: this.apiClient,\n        mediaConfig: this.mediaConfig,\n      });\n\n      // Store sub room\n      this.subRooms.set(subRoom.id, subRoom);\n\n      this.emit(\"subRoomCreated\", { room: this, subRoom });\n\n      return subRoom;\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"createSubRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Get all sub rooms\n   */\n  async getSubRooms() {\n    if (this.type !== \"main\") {\n      return [];\n    }\n\n    try {\n      const subRoomsData = await this.apiClient.getSubRooms(this.id);\n\n      // Update local sub rooms map\n      for (const subRoomData of subRoomsData) {\n        if (!this.subRooms.has(subRoomData.id)) {\n          const subRoom = new Room({\n            id: subRoomData.id,\n            name: subRoomData.room_name,\n            code: subRoomData.room_code,\n            type: subRoomData.room_type,\n            parentRoomId: this.id,\n            ownerId: subRoomData.user_id,\n            apiClient: this.apiClient,\n            mediaConfig: this.mediaConfig,\n          });\n\n          this.subRooms.set(subRoom.id, subRoom);\n        }\n      }\n\n      return Array.from(this.subRooms.values());\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"getSubRooms\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Switch to a sub room\n   */\n  async switchToSubRoom(subRoomCode) {\n    try {\n      this.emit(\"switchingToSubRoom\", { room: this, subRoomCode });\n\n      // Switch via API\n      const switchResponse = await this.apiClient.switchToSubRoom(\n        this.id,\n        subRoomCode\n      );\n\n      // Cleanup current media connections but keep participants\n      await this._cleanupMediaConnections();\n\n      // Update connection info for new sub room\n      this.membershipId = switchResponse.id;\n      this.streamId = switchResponse.stream_id;\n\n      // Setup media connections for sub room\n      await this._setupMediaConnections();\n\n      this.emit(\"switchedToSubRoom\", {\n        room: this,\n        subRoomCode,\n        response: switchResponse,\n      });\n\n      return switchResponse;\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"switchToSubRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Return to main room from sub room\n   */\n  async returnToMainRoom() {\n    if (!this.parentRoomId) {\n      throw new Error(\"This is not a sub room\");\n    }\n\n    try {\n      this.emit(\"returningToMainRoom\", { room: this });\n\n      // Leave current sub room\n      await this.leave();\n\n      // The parent should handle rejoining main room\n      this.emit(\"returnedToMainRoom\", { room: this });\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"returnToMainRoom\" });\n      throw error;\n    }\n  }\n\n  async sendMessage(text, metadata = {}) {\n    if (!this.isActive) {\n      throw new Error(\"Cannot send message: room is not active\");\n    }\n\n    if (!this.localParticipant?.publisher) {\n      throw new Error(\"Cannot send message: publisher not available\");\n    }\n\n    if (!text || typeof text !== \"string\" || text.trim().length === 0) {\n      throw new Error(\"Message text is required and must be a non-empty string\");\n    }\n\n    try {\n      const messageId = this._generateMessageId();\n      const message = {\n        id: messageId,\n        text: text.trim(),\n        senderId: this.localParticipant.userId,\n        senderName: metadata.senderName || this.localParticipant.userId,\n        roomId: this.id,\n        timestamp: Date.now(),\n        metadata: metadata.customData || {},\n      };\n\n      const messageEvent = {\n        type: \"message\",\n        ...message,\n      };\n\n      await this.localParticipant.publisher.sendEvent(messageEvent);\n\n      this.messages.push(message);\n\n      this.emit(\"messageSent\", {\n        room: this,\n        message,\n      });\n\n      return message;\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"sendMessage\" });\n      throw error;\n    }\n  }\n\n  async deleteMessage(messageId) {\n    if (!this.isActive) {\n      throw new Error(\"Cannot delete message: room is not active\");\n    }\n\n    if (!this.localParticipant?.publisher) {\n      throw new Error(\"Cannot delete message: publisher not available\");\n    }\n\n    try {\n      const deleteEvent = {\n        type: \"messageDelete\",\n        messageId,\n        senderId: this.localParticipant.userId,\n        roomId: this.id,\n        timestamp: Date.now(),\n      };\n\n      await this.localParticipant.publisher.sendEvent(deleteEvent);\n\n      this.messages = this.messages.filter((m) => m.id !== messageId);\n\n      this.emit(\"messageDeleted\", {\n        room: this,\n        messageId,\n      });\n\n      return true;\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"deleteMessage\" });\n      throw error;\n    }\n  }\n\n  async updateMessage(messageId, newText, metadata = {}) {\n    if (!this.isActive) {\n      throw new Error(\"Cannot update message: room is not active\");\n    }\n\n    if (!this.localParticipant?.publisher) {\n      throw new Error(\"Cannot update message: publisher not available\");\n    }\n\n    if (!newText || typeof newText !== \"string\" || newText.trim().length === 0) {\n      throw new Error(\"New message text is required and must be a non-empty string\");\n    }\n\n    try {\n      const updateEvent = {\n        type: \"messageUpdate\",\n        messageId,\n        text: newText.trim(),\n        senderId: this.localParticipant.userId,\n        roomId: this.id,\n        timestamp: Date.now(),\n        metadata: metadata.customData || {},\n      };\n\n      await this.localParticipant.publisher.sendEvent(updateEvent);\n\n      const messageIndex = this.messages.findIndex((m) => m.id === messageId);\n      if (messageIndex !== -1) {\n        this.messages[messageIndex].text = newText.trim();\n        this.messages[messageIndex].updatedAt = Date.now();\n        this.messages[messageIndex].metadata = {\n          ...this.messages[messageIndex].metadata,\n          ...updateEvent.metadata,\n        };\n      }\n\n      this.emit(\"messageUpdated\", {\n        room: this,\n        messageId,\n        text: newText.trim(),\n      });\n\n      return true;\n    } catch (error) {\n      this.emit(\"error\", { room: this, error, action: \"updateMessage\" });\n      throw error;\n    }\n  }\n\n  async sendTypingIndicator(isTyping = true) {\n    if (!this.isActive) {\n      return;\n    }\n\n    if (!this.localParticipant?.publisher) {\n      return;\n    }\n\n    try {\n      const typingEvent = {\n        type: isTyping ? \"typingStart\" : \"typingStop\",\n        userId: this.localParticipant.userId,\n        roomId: this.id,\n        timestamp: Date.now(),\n      };\n\n      await this.localParticipant.publisher.sendEvent(typingEvent);\n    } catch (error) {\n      console.error(\"Failed to send typing indicator:\", error);\n    }\n  }\n\n  getMessages(limit = 100) {\n    return this.messages.slice(-limit);\n  }\n\n  getTypingUsers() {\n    return Array.from(this.typingUsers.values());\n  }\n\n  clearMessages() {\n    this.messages = [];\n  }\n\n  /**\n   * Add a participant to the room\n   */\n  addParticipant(memberData, userId) {\n    const isLocal = memberData.user_id === userId;\n\n    const participant = new Participant({\n      userId: memberData.user_id,\n      streamId: memberData.stream_id,\n      membershipId: memberData.id,\n      role: memberData.role,\n      roomId: this.id,\n      isLocal,\n    });\n\n    // Setup participant events\n    this._setupParticipantEvents(participant);\n\n    this.participants.set(participant.userId, participant);\n\n    if (isLocal) {\n      this.localParticipant = participant;\n    }\n\n    this.emit(\"participantAdded\", { room: this, participant });\n\n    return participant;\n  }\n\n  /**\n   * Remove a participant from the room\n   */\n  removeParticipant(userId) {\n    const participant = this.participants.get(userId);\n    if (!participant) return null;\n\n    // Cleanup participant\n    participant.cleanup();\n\n    // Remove from maps\n    this.participants.delete(userId);\n\n    if (this.localParticipant?.userId === userId) {\n      this.localParticipant = null;\n    }\n\n    if (this.pinnedParticipant?.userId === userId) {\n      this.pinnedParticipant = null;\n    }\n\n    this.emit(\"participantRemoved\", { room: this, participant });\n\n    return participant;\n  }\n\n  /**\n   * Get a participant by user ID\n   */\n  getParticipant(userId) {\n    return this.participants.get(userId);\n  }\n\n  /**\n   * Get all participants\n   */\n  getParticipants() {\n    return Array.from(this.participants.values());\n  }\n\n  /**\n   * Pin a participant's video\n   */\n  // pinParticipant(userId) {\n  //   const participant = this.participants.get(userId);\n  //   if (!participant) return false;\n\n  //   // Unpin current participant\n  //   if (this.pinnedParticipant) {\n  //     this.pinnedParticipant.isPinned = false;\n  //   }\n\n  //   // Pin new participant\n  //   participant.isPinned = true;\n  //   this.pinnedParticipant = participant;\n\n  //   this.emit(\"participantPinned\", { room: this, participant });\n\n  //   return true;\n  // }\n\n  pinParticipant(userId) {\n    const participant = this.participants.get(userId);\n    if (!participant) return false;\n\n    // Unpin current participant và move về sidebar\n    if (this.pinnedParticipant && this.pinnedParticipant !== participant) {\n      this.pinnedParticipant.isPinned = false;\n    }\n\n    // Pin new participant và move lên main\n    participant.isPinned = true;\n    this.pinnedParticipant = participant;\n\n    this.emit(\"participantPinned\", { room: this, participant });\n\n    return true;\n  }\n\n  /**\n   * Unpin currently pinned participant\n   */\n  // unpinParticipant() {\n  //   if (!this.pinnedParticipant) return false;\n\n  //   this.pinnedParticipant.isPinned = false;\n  //   const unpinnedParticipant = this.pinnedParticipant;\n  //   this.pinnedParticipant = null;\n\n  //   this.emit(\"participantUnpinned\", {\n  //     room: this,\n  //     participant: unpinnedParticipant,\n  //   });\n\n  //   return true;\n  // }\n\n  unpinParticipant() {\n    if (!this.pinnedParticipant) return false;\n\n    this.pinnedParticipant.isPinned = false;\n    const unpinnedParticipant = this.pinnedParticipant;\n\n    this.pinnedParticipant = null;\n\n    // Auto-pin local participant nếu có\n    if (this.localParticipant) {\n      this.pinParticipant(this.localParticipant.userId);\n    }\n\n    this.emit(\"participantUnpinned\", {\n      room: this,\n      participant: unpinnedParticipant,\n    });\n\n    return true;\n  }\n\n  /**\n   * Get room info\n   */\n  getInfo() {\n    return {\n      id: this.id,\n      name: this.name,\n      code: this.code,\n      type: this.type,\n      parentRoomId: this.parentRoomId,\n      ownerId: this.ownerId,\n      isActive: this.isActive,\n      participantCount: this.participants.size,\n      subRoomCount: this.subRooms.size,\n      pinnedParticipant: this.pinnedParticipant?.userId || null,\n    };\n  }\n\n  /**\n   * Setup participants from API data\n   */\n  async _setupParticipants(participantsData, userId) {\n    for (const participantData of participantsData) {\n      this.addParticipant(participantData, userId);\n    }\n  }\n\n  /**\n   * Setup media connections for all participants\n   */\n  async _setupMediaConnections() {\n    // Initialize audio mixer\n    if (!this.audioMixer) {\n      this.audioMixer = new AudioMixer();\n      await this.audioMixer.initialize();\n    }\n\n    // Setup publisher for local participant\n    if (this.localParticipant) {\n      await this._setupLocalPublisher();\n    }\n\n    // Setup subscribers for remote participants\n    for (const participant of this.participants.values()) {\n      if (!participant.isLocal) {\n        await this._setupRemoteSubscriber(participant);\n      }\n    }\n\n    // Setup stream event forwarding\n    this._setupStreamEventForwarding();\n  }\n\n  /**\n   * Setup publisher for local participant\n   */\n  async _setupLocalPublisher() {\n    if (!this.localParticipant || !this.streamId) return;\n\n    // Video rendering handled by app through stream events\n\n    const publishUrl = `${this.mediaConfig.webtpUrl}/${this.id}/${this.streamId}`;\n    console.log(\"trying to connect webtransport to\", publishUrl);\n\n    const publisher = new Publisher({\n      publishUrl,\n      streamType: \"camera\",\n      streamId: this.streamId,\n      width: 1280,\n      height: 720,\n      framerate: 30,\n      bitrate: 1_500_000,\n      onStatusUpdate: (msg, isError) => {\n        this.localParticipant.setConnectionStatus(\n          isError ? \"failed\" : \"connected\"\n        );\n      },\n      onServerEvent: async (event) => {\n        await this._handleServerEvent(event);\n      },\n    });\n\n    // Setup stream event forwarding\n    publisher.on(\"localStreamReady\", (data) => {\n      this.emit(\"localStreamReady\", {\n        ...data,\n        participant: this.localParticipant.getInfo(),\n        roomId: this.id,\n      });\n    });\n\n    await publisher.startPublishing();\n    this.localParticipant.setPublisher(publisher);\n  }\n\n  /**\n   * Setup subscriber for remote participant\n   */\n  async _setupRemoteSubscriber(participant) {\n    const subscriber = new Subscriber({\n      streamId: participant.streamId,\n      roomId: this.id,\n      host: this.mediaConfig.host,\n      streamOutputEnabled: true,\n      onStatus: (msg, isError) => {\n        participant.setConnectionStatus(isError ? \"failed\" : \"connected\");\n      },\n      audioWorkletUrl: \"workers/audio-worklet1.js\",\n      mstgPolyfillUrl: \"polyfills/MSTG_polyfill.js\",\n    });\n    // Add to audio mixer\n    if (this.audioMixer) {\n      subscriber.setAudioMixer(this.audioMixer);\n    }\n\n    // Setup stream event forwarding\n    subscriber.on(\"remoteStreamReady\", (data) => {\n      this.emit(\"remoteStreamReady\", {\n        ...data,\n        participant: participant.getInfo(),\n        roomId: this.id,\n      });\n    });\n\n    // subscriber.on(\"streamRemoved\", (data) => {\n    //   this.emit(\"streamRemoved\", {\n    //     ...data,\n    //     participant: participant.getInfo(),\n    //     roomId: this.id\n    //   });\n    // });\n\n    await subscriber.start();\n    participant.setSubscriber(subscriber);\n  }\n\n  /**\n   * Handle server events from publisher\n   */\n  async _handleServerEvent(event) {\n    console.log(\"-----Received server event----\", event);\n    if (event.type === \"join\") {\n      const joinedParticipant = event.participant;\n      if (joinedParticipant.user_id === this.localParticipant?.userId) return;\n\n      const participant = this.addParticipant(\n        {\n          user_id: joinedParticipant.user_id,\n          stream_id: joinedParticipant.stream_id,\n          id: joinedParticipant.membership_id,\n          role: joinedParticipant.role,\n        },\n        this.localParticipant?.userId\n      );\n\n      await this._setupRemoteSubscriber(participant);\n    }\n\n    if (event.type === \"leave\") {\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant) {\n        this.removeParticipant(event.participant.user_id);\n\n        if (!this.pinnedParticipant && this.localParticipant) {\n          this.pinParticipant(this.localParticipant.userId);\n        }\n      }\n    }\n\n    if (event.type === \"message\") {\n      const message = {\n        id: event.id,\n        text: event.text,\n        senderId: event.senderId,\n        senderName: event.senderName,\n        roomId: event.roomId,\n        timestamp: event.timestamp,\n        metadata: event.metadata || {},\n      };\n\n      this.messages.push(message);\n\n      const sender = this.getParticipant(event.senderId);\n\n      this.emit(\"messageReceived\", {\n        room: this,\n        message,\n        sender: sender ? sender.getInfo() : null,\n      });\n    }\n\n    if (event.type === \"messageDelete\") {\n      this.messages = this.messages.filter((m) => m.id !== event.messageId);\n\n      this.emit(\"messageDeleted\", {\n        room: this,\n        messageId: event.messageId,\n        senderId: event.senderId,\n      });\n    }\n\n    if (event.type === \"messageUpdate\") {\n      const messageIndex = this.messages.findIndex((m) => m.id === event.messageId);\n      if (messageIndex !== -1) {\n        this.messages[messageIndex].text = event.text;\n        this.messages[messageIndex].updatedAt = event.timestamp;\n        this.messages[messageIndex].metadata = {\n          ...this.messages[messageIndex].metadata,\n          ...event.metadata,\n        };\n      }\n\n      this.emit(\"messageUpdated\", {\n        room: this,\n        messageId: event.messageId,\n        text: event.text,\n        senderId: event.senderId,\n      });\n    }\n\n    if (event.type === \"typingStart\") {\n      if (event.userId !== this.localParticipant?.userId) {\n        this.typingUsers.set(event.userId, {\n          userId: event.userId,\n          timestamp: event.timestamp,\n        });\n\n        this.emit(\"typingStarted\", {\n          room: this,\n          userId: event.userId,\n          user: this.getParticipant(event.userId)?.getInfo(),\n        });\n\n        setTimeout(() => {\n          this.typingUsers.delete(event.userId);\n          this.emit(\"typingStopped\", {\n            room: this,\n            userId: event.userId,\n          });\n        }, 5000);\n      }\n    }\n\n    if (event.type === \"typingStop\") {\n      if (event.userId !== this.localParticipant?.userId) {\n        this.typingUsers.delete(event.userId);\n\n        this.emit(\"typingStopped\", {\n          room: this,\n          userId: event.userId,\n          user: this.getParticipant(event.userId)?.getInfo(),\n        });\n      }\n    }\n    if (event.type === \"start_share_screen\") {\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant && participant.userId !== this.localParticipant?.userId) {\n        participant.isScreenSharing = true;\n        this.emit(\"remoteScreenShareStarted\", { room: this, participant });\n      }\n    }\n\n    if (event.type === \"stop_share_screen\") {\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant && participant.userId !== this.localParticipant?.userId) {\n        participant.isScreenSharing = false;\n        this.emit(\"remoteScreenShareStopped\", { room: this, participant });\n      }\n    }\n\n    if (event.type === \"mic_on\") {\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant) {\n        participant.updateMicStatus(true);\n        this.emit(\"remoteAudioStatusChanged\", {\n          room: this,\n          participant,\n          enabled: true,\n        });\n      }\n    }\n\n    if (event.type === \"mic_off\") {\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant) {\n        participant.updateMicStatus(false);\n        this.emit(\"remoteAudioStatusChanged\", {\n          room: this,\n          participant,\n          enabled: false,\n        });\n      }\n    }\n\n    if (event.type === \"camera_on\") {\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant) {\n        participant.updateCameraStatus(true);\n        this.emit(\"remoteVideoStatusChanged\", {\n          room: this,\n          participant,\n          enabled: true,\n        });\n      }\n    }\n\n    if (event.type === \"camera_off\") {\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant) {\n        participant.updateCameraStatus(false);\n        this.emit(\"remoteVideoStatusChanged\", {\n          room: this,\n          participant,\n          enabled: false,\n        });\n      }\n    }\n\n    if (event.type === \"pin_for_everyone\") {\n      console.log(`Pin for everyone event received:`, event.participant);\n      const participant = this.participants.get(event.participant.user_id);\n      if (participant) {\n        this.pinParticipant(participant.userId);\n        this.emit(\"participantPinnedForEveryone\", { room: this, participant });\n      }\n    }\n\n    if (event.type === \"unpin_for_everyone\") {\n      console.log(`Unpin for everyone event received`);\n      if (this.pinnedParticipant) {\n        const participant = this.pinnedParticipant;\n        this.unpinParticipant();\n        this.emit(\"participantUnpinnedForEveryone\", {\n          room: this,\n          participant,\n        });\n      }\n    }\n  }\n\n  _setupParticipantEvents(participant) {\n    participant.on(\"pinToggled\", ({ participant: p, pinned }) => {\n      if (pinned) {\n        this.pinParticipant(p.userId);\n      } else if (this.pinnedParticipant === p) {\n        this.unpinParticipant();\n      }\n    });\n\n    participant.on(\"error\", ({ participant: p, error, action }) => {\n      this.emit(\"participantError\", {\n        room: this,\n        participant: p,\n        error,\n        action,\n      });\n    });\n  }\n\n  /**\n   * Update room data from API response\n   */\n  _updateFromApiData(roomData) {\n    this.name = roomData.room_name || this.name;\n    this.ownerId = roomData.user_id || this.ownerId;\n  }\n\n  /**\n   * Cleanup media connections\n   */\n  async _cleanupMediaConnections() {\n    // Cleanup audio mixer\n    if (this.audioMixer) {\n      await this.audioMixer.cleanup();\n      this.audioMixer = null;\n    }\n\n    // Cleanup all participants' media\n    for (const participant of this.participants.values()) {\n      if (participant.publisher) {\n        participant.publisher.stop();\n        participant.publisher = null;\n      }\n      if (participant.subscriber) {\n        participant.subscriber.stop();\n        participant.subscriber = null;\n      }\n    }\n  }\n\n  /**\n   * Cleanup all participants\n   */\n  _cleanupParticipants() {\n    for (const participant of this.participants.values()) {\n      participant.cleanup();\n    }\n\n    this.participants.clear();\n    this.localParticipant = null;\n    this.pinnedParticipant = null;\n    this.typingUsers.clear();\n  }\n\n  _generateMessageId() {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Setup stream event forwarding for existing participants\n   */\n  _setupStreamEventForwarding() {\n    // Setup for local participant if exists\n    if (this.localParticipant && this.localParticipant.publisher) {\n      this.localParticipant.publisher.on(\"localStreamReady\", (data) => {\n        this.emit(\"localStreamReady\", {\n          ...data,\n          participant: this.localParticipant.getInfo(),\n          roomId: this.id,\n        });\n      });\n    }\n\n    // Setup for remote participants\n    for (const participant of this.participants.values()) {\n      if (participant.subscriber && !participant.isLocal) {\n        participant.subscriber.on(\"remoteStreamReady\", (data) => {\n          this.emit(\"remoteStreamReady\", {\n            ...data,\n            participant: participant.getInfo(),\n            roomId: this.id,\n          });\n        });\n\n        // participant.subscriber.on(\"streamRemoved\", (data) => {\n        //   this.emit(\"streamRemoved\", {\n        //     ...data,\n        //     participant: participant.getInfo(),\n        //     roomId: this.id\n        //   });\n        // });\n      }\n    }\n  }\n\n  /**\n   * Remove stream event forwarding\n   */\n  _removeStreamEventForwarding() {\n    // Remove local participant events\n    if (this.localParticipant && this.localParticipant.publisher) {\n      this.localParticipant.publisher.removeAllListeners(\"localStreamReady\");\n    }\n\n    // Remove remote participants events\n    for (const participant of this.participants.values()) {\n      if (participant.subscriber && !participant.isLocal) {\n        participant.subscriber.removeAllListeners(\"remoteStreamReady\");\n        participant.subscriber.removeAllListeners(\"streamRemoved\");\n      }\n    }\n  }\n\n  /**\n   * Cleanup room resources\n   */\n  async cleanup() {\n    if (this.isActive) {\n      await this.leave();\n    }\n\n    // Cleanup sub rooms\n    for (const subRoom of this.subRooms.values()) {\n      await subRoom.cleanup();\n    }\n    this.subRooms.clear();\n\n    this.removeAllListeners();\n  }\n}\n\nexport default Room;\n","import Room from \"./Room.js\";\n\n/**\n * SubRoom extends Room with additional functionality for breakout rooms\n */\nclass SubRoom extends Room {\n  constructor(config) {\n    super({\n      ...config,\n      type: config.type || \"breakout\",\n    });\n\n    this.parentRoom = config.parentRoom; // Reference to parent Room instance\n    this.maxParticipants = config.maxParticipants || 10;\n    this.autoReturn = config.autoReturn || false; // Auto return to main room when empty\n    this.duration = config.duration || null; // Duration in minutes, null = unlimited\n    this.startTime = null;\n\n    // Sub room specific state\n    this.isTemporary = config.isTemporary || true;\n    this.allowSelfAssign = config.allowSelfAssign || true;\n\n    this._setupSubRoomEvents();\n  }\n\n  /**\n   * Join the sub room from main room\n   */\n  async joinFromMain(userId) {\n    if (!this.parentRoom) {\n      throw new Error(\"No parent room reference\");\n    }\n\n    try {\n      this.emit(\"joiningFromMain\", { subRoom: this, userId });\n\n      // Pause main room media without leaving\n      await this.parentRoom._pauseMediaConnections();\n\n      // Join this sub room\n      const joinResult = await this.join(userId);\n\n      // Start duration timer if set\n      if (this.duration && !this.startTime) {\n        this.startTime = Date.now();\n        this._startDurationTimer();\n      }\n\n      this.emit(\"joinedFromMain\", { subRoom: this, userId, joinResult });\n\n      return joinResult;\n    } catch (error) {\n      // Resume main room media on error\n      if (this.parentRoom) {\n        await this.parentRoom._resumeMediaConnections();\n      }\n\n      this.emit(\"error\", { subRoom: this, error, action: \"joinFromMain\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Return to main room\n   */\n  async returnToMainRoom() {\n    if (!this.parentRoom) {\n      throw new Error(\"No parent room reference\");\n    }\n\n    try {\n      this.emit(\"returningToMain\", { subRoom: this });\n\n      // Leave sub room\n      await this.leave();\n\n      // Resume main room media\n      await this.parentRoom._resumeMediaConnections();\n\n      this.emit(\"returnedToMain\", { subRoom: this });\n\n      // Check if should cleanup empty room\n      if (this.participants.size === 0 && this.autoReturn) {\n        await this.cleanup();\n      }\n\n      return this.parentRoom;\n    } catch (error) {\n      this.emit(\"error\", { subRoom: this, error, action: \"returnToMainRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Switch to another sub room directly\n   */\n  async switchToSubRoom(targetSubRoom) {\n    if (!this.parentRoom) {\n      throw new Error(\"No parent room reference\");\n    }\n\n    try {\n      this.emit(\"switchingToSubRoom\", {\n        fromSubRoom: this,\n        toSubRoom: targetSubRoom,\n      });\n\n      // Leave current sub room\n      await this.leave();\n\n      // Join target sub room\n      const joinResult = await targetSubRoom.joinFromMain(\n        this.localParticipant?.userId\n      );\n\n      this.emit(\"switchedToSubRoom\", {\n        fromSubRoom: this,\n        toSubRoom: targetSubRoom,\n      });\n\n      return joinResult;\n    } catch (error) {\n      this.emit(\"error\", { subRoom: this, error, action: \"switchToSubRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Invite participant to this sub room\n   */\n  async inviteParticipant(userId) {\n    try {\n      // Send invitation via API (implementation depends on API support)\n      const result = await this.apiClient.inviteToSubRoom(this.id, userId);\n\n      this.emit(\"participantInvited\", { subRoom: this, userId, result });\n\n      return result;\n    } catch (error) {\n      this.emit(\"error\", { subRoom: this, error, action: \"inviteParticipant\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Assign participant to this sub room (host action)\n   */\n  async assignParticipant(userId) {\n    try {\n      // Force assignment via API\n      const result = await this.apiClient.assignToSubRoom(this.id, userId);\n\n      this.emit(\"participantAssigned\", { subRoom: this, userId, result });\n\n      return result;\n    } catch (error) {\n      this.emit(\"error\", { subRoom: this, error, action: \"assignParticipant\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Broadcast message to all participants\n   */\n  async broadcastMessage(message, type = \"info\") {\n    try {\n      const result = await this.apiClient.broadcastToSubRoom(\n        this.id,\n        message,\n        type\n      );\n\n      this.emit(\"messageBroadcast\", { subRoom: this, message, type, result });\n\n      return result;\n    } catch (error) {\n      this.emit(\"error\", { subRoom: this, error, action: \"broadcastMessage\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Get remaining time in minutes\n   */\n  getRemainingTime() {\n    if (!this.duration || !this.startTime) {\n      return null;\n    }\n\n    const elapsed = (Date.now() - this.startTime) / (1000 * 60); // in minutes\n    const remaining = Math.max(0, this.duration - elapsed);\n\n    return Math.ceil(remaining);\n  }\n\n  /**\n   * Extend sub room duration\n   */\n  extendDuration(additionalMinutes) {\n    if (!this.duration) {\n      this.duration = additionalMinutes;\n      this.startTime = Date.now();\n    } else {\n      this.duration += additionalMinutes;\n    }\n\n    this.emit(\"durationExtended\", {\n      subRoom: this,\n      additionalMinutes,\n      newDuration: this.duration,\n    });\n\n    // Restart timer if needed\n    if (this.startTime) {\n      this._startDurationTimer();\n    }\n  }\n\n  /**\n   * Set participant limit\n   */\n  setMaxParticipants(limit) {\n    this.maxParticipants = limit;\n\n    this.emit(\"maxParticipantsChanged\", {\n      subRoom: this,\n      maxParticipants: limit,\n    });\n\n    // If over limit, may need to handle overflow\n    if (this.participants.size > limit) {\n      this.emit(\"participantLimitExceeded\", {\n        subRoom: this,\n        current: this.participants.size,\n        limit,\n      });\n    }\n  }\n\n  /**\n   * Check if sub room is full\n   */\n  isFull() {\n    return this.participants.size >= this.maxParticipants;\n  }\n\n  /**\n   * Check if sub room is empty\n   */\n  isEmpty() {\n    return this.participants.size === 0;\n  }\n\n  /**\n   * Check if sub room has expired\n   */\n  hasExpired() {\n    if (!this.duration || !this.startTime) {\n      return false;\n    }\n\n    const elapsed = (Date.now() - this.startTime) / (1000 * 60);\n    return elapsed >= this.duration;\n  }\n\n  /**\n   * Get sub room statistics\n   */\n  getStats() {\n    return {\n      ...this.getInfo(),\n      maxParticipants: this.maxParticipants,\n      duration: this.duration,\n      remainingTime: this.getRemainingTime(),\n      startTime: this.startTime,\n      isFull: this.isFull(),\n      isEmpty: this.isEmpty(),\n      hasExpired: this.hasExpired(),\n      isTemporary: this.isTemporary,\n      allowSelfAssign: this.allowSelfAssign,\n      autoReturn: this.autoReturn,\n    };\n  }\n\n  /**\n   * Setup sub room specific events\n   */\n  _setupSubRoomEvents() {\n    // Handle participant left\n    this.on(\"participantRemoved\", ({ room, participant }) => {\n      // Auto return to main room if empty and configured to do so\n      if (this.isEmpty() && this.autoReturn && this.parentRoom) {\n        setTimeout(() => {\n          if (this.isEmpty()) {\n            // Double check after delay\n            this.cleanup();\n          }\n        }, 5000); // 5 second delay\n      }\n    });\n\n    // Handle room expiry warnings\n    if (this.duration) {\n      // Warn 5 minutes before expiry\n      const warningTime = Math.max(1, this.duration - 5);\n      setTimeout(() => {\n        if (this.isActive && !this.hasExpired()) {\n          this.emit(\"expiryWarning\", { subRoom: this, remainingMinutes: 5 });\n        }\n      }, warningTime * 60 * 1000);\n    }\n  }\n\n  /**\n   * Start duration timer for automatic closure\n   */\n  _startDurationTimer() {\n    if (this._durationTimer) {\n      clearTimeout(this._durationTimer);\n    }\n\n    if (!this.duration) return;\n\n    const remainingMs = this.getRemainingTime() * 60 * 1000;\n\n    if (remainingMs <= 0) {\n      this._handleExpiry();\n      return;\n    }\n\n    this._durationTimer = setTimeout(() => {\n      this._handleExpiry();\n    }, remainingMs);\n  }\n\n  /**\n   * Handle sub room expiry\n   */\n  async _handleExpiry() {\n    this.emit(\"expired\", { subRoom: this });\n\n    // Notify all participants\n    await this.broadcastMessage(\n      \"Sub room session has expired. Returning to main room.\",\n      \"warning\"\n    );\n\n    // Return all participants to main room\n    const participants = Array.from(this.participants.values());\n    for (const participant of participants) {\n      if (participant.isLocal) {\n        await this.returnToMainRoom();\n      }\n    }\n\n    // Cleanup sub room\n    await this.cleanup();\n  }\n\n  /**\n   * Override cleanup to clear timers\n   */\n  async cleanup() {\n    // Clear duration timer\n    if (this._durationTimer) {\n      clearTimeout(this._durationTimer);\n      this._durationTimer = null;\n    }\n\n    // Remove from parent room's sub rooms map\n    if (this.parentRoom) {\n      this.parentRoom.subRooms.delete(this.id);\n    }\n\n    // Call parent cleanup\n    await super.cleanup();\n\n    this.emit(\"cleanedUp\", { subRoom: this });\n  }\n\n  /**\n   * Serialize sub room state for persistence or transfer\n   */\n  serialize() {\n    return {\n      ...this.getStats(),\n      participantIds: Array.from(this.participants.keys()),\n      parentRoomId: this.parentRoom?.id || this.parentRoomId,\n      createdAt: this.startTime || Date.now(),\n    };\n  }\n\n  /**\n   * Create sub room from serialized data\n   */\n  static fromSerializedData(data, parentRoom, apiClient, mediaConfig) {\n    return new SubRoom({\n      id: data.id,\n      name: data.name,\n      code: data.code,\n      type: data.type,\n      parentRoom,\n      parentRoomId: data.parentRoomId,\n      ownerId: data.ownerId,\n      maxParticipants: data.maxParticipants,\n      duration: data.duration,\n      autoReturn: data.autoReturn,\n      isTemporary: data.isTemporary,\n      allowSelfAssign: data.allowSelfAssign,\n      apiClient,\n      mediaConfig,\n    });\n  }\n}\n\nexport default SubRoom;\n","import EventEmitter from \"../events/EventEmitter.js\";\nimport ApiClient from \"../api/ApiClient.js\";\nimport Room from \"./Room.js\";\nimport SubRoom from \"./SubRoom.js\";\n\n/**\n * Main Ermis Classroom client\n */\nclass ErmisClient extends EventEmitter {\n  constructor(config = {}) {\n    super();\n\n    // Configuration\n    this.config = {\n      host: config.host || \"daibo.ermis.network:9992\",\n      apiUrl:\n        config.apiUrl ||\n        `https://${config.host || \"daibo.ermis.network:9992\"}/meeting`,\n      webtpUrl:\n        config.webtpUrl || \"https://daibo.ermis.network:4458/meeting/wt\",\n      reconnectAttempts: config.reconnectAttempts || 3,\n      reconnectDelay: config.reconnectDelay || 2000,\n      debug: config.debug || false,\n    };\n\n    // API client\n    this.apiClient = new ApiClient({\n      host: this.config.host,\n      apiUrl: this.config.apiUrl,\n    });\n\n    // State management\n    this.state = {\n      user: null,\n      isAuthenticated: false,\n      currentRoom: null,\n      rooms: new Map(), // roomId -> Room\n      connectionStatus: \"disconnected\", // 'disconnected', 'connecting', 'connected', 'failed'\n    };\n\n    // Media configuration\n    this.mediaConfig = {\n      host: this.config.host,\n      webtpUrl: this.config.webtpUrl,\n      defaultVideoConfig: {\n        width: 1280,\n        height: 720,\n        framerate: 30,\n        bitrate: 1_500_000,\n      },\n      defaultAudioConfig: {\n        sampleRate: 48000,\n        channels: 2,\n      },\n    };\n\n    this._setupEventHandlers();\n  }\n\n  /**\n   * Authenticate user\n   */\n  async authenticate(userId) {\n    if (this.state.isAuthenticated && this.state.user?.id === userId) {\n      return this.state.user;\n    }\n\n    try {\n      this.emit(\"authenticating\", { userId });\n      this._setConnectionStatus(\"connecting\");\n\n      // Validate email format if it looks like email\n      if (userId.includes(\"@\")) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(userId)) {\n          throw new Error(\"Invalid email format\");\n        }\n      }\n\n      // Get authentication token\n      const tokenResponse = await this.apiClient.getDummyToken(userId);\n\n      // Set authentication in API client\n      this.apiClient.setAuth(tokenResponse.access_token, userId);\n\n      // Update state\n      this.state.user = {\n        id: userId,\n        token: tokenResponse.access_token,\n        authenticatedAt: Date.now(),\n      };\n      this.state.isAuthenticated = true;\n\n      this._setConnectionStatus(\"connected\");\n      this.emit(\"authenticated\", { user: this.state.user });\n\n      this._debug(\"User authenticated successfully:\", userId);\n\n      return this.state.user;\n    } catch (error) {\n      this._setConnectionStatus(\"failed\");\n      this.emit(\"authenticationFailed\", { userId, error });\n      this._debug(\"Authentication failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n * Set authentication directly without calling API\n */\n  manualAuthenticate(userId, token) {\n    if (!userId || !token) {\n      throw new Error(\"userId and token are required\");\n    }\n\n    // Set auth to API client\n    this.apiClient.setAuth(token, userId);\n\n    // Update state\n    this.state.user = {\n      id: userId,\n      token,\n      authenticatedAt: Date.now(),\n    };\n    this.state.isAuthenticated = true;\n\n    // Update connection status\n    this._setConnectionStatus(\"connected\");\n\n    // Emit event\n    this.emit(\"authenticated\", { user: this.state.user });\n\n    this._debug(\"Auth set directly:\", this.state.user);\n  }\n\n  /**\n   * Logout user\n   */\n  async logout() {\n    if (!this.state.isAuthenticated) {\n      return;\n    }\n\n    try {\n      this.emit(\"loggingOut\", { user: this.state.user });\n\n      // Leave current room if any\n      if (this.state.currentRoom) {\n        await this.state.currentRoom.leave();\n      }\n\n      // Reset state\n      this.state.user = null;\n      this.state.isAuthenticated = false;\n      this.state.currentRoom = null;\n      this.state.rooms.clear();\n\n      this._setConnectionStatus(\"disconnected\");\n      this.emit(\"loggedOut\");\n\n      this._debug(\"User logged out successfully\");\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"logout\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new room\n   */\n  async createRoom(config) {\n    this._ensureAuthenticated();\n\n    try {\n      this.emit(\"creatingRoom\", { config });\n\n      const roomData = await this.apiClient.createRoom(\n        config.name,\n        config.type\n      );\n\n      const room = new Room({\n        id: roomData.id,\n        name: roomData.room_name,\n        code: roomData.room_code,\n        type: config.type || \"main\",\n        ownerId: roomData.user_id,\n        apiClient: this.apiClient,\n        mediaConfig: this.mediaConfig,\n      });\n\n      this._setupRoomEvents(room);\n      this.state.rooms.set(room.id, room);\n\n      this.emit(\"roomCreated\", { room });\n      this._debug(\"Room created:\", room.getInfo());\n\n      // Auto-join if specified\n      if (config.autoJoin !== false) {\n        await this.joinRoom(room.code);\n      }\n\n      return room;\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"createRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Join a room by code\n   */\n  async joinRoom(roomCode) {\n    this._ensureAuthenticated();\n\n    try {\n      this.emit(\"joiningRoom\", { roomCode });\n\n      // Leave current room if any\n      if (this.state.currentRoom) {\n        await this.state.currentRoom.leave();\n      }\n\n      // Try to find existing room instance first\n      let room = Array.from(this.state.rooms.values()).find(\n        (r) => r.code === roomCode\n      );\n\n      if (!room) {\n        // Create new room instance\n        room = new Room({\n          code: roomCode,\n          apiClient: this.apiClient,\n          mediaConfig: this.mediaConfig,\n        });\n\n        this._setupRoomEvents(room);\n      }\n\n      // Join the room\n      const joinResult = await room.join(this.state.user.id);\n\n      // Update state\n      this.state.currentRoom = room;\n      this.state.rooms.set(room.id, room);\n\n      this.emit(\"roomJoined\", { room, joinResult });\n      this._debug(\"Joined room:\", room.getInfo());\n\n      return joinResult;\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"joinRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Leave current room\n   */\n  async leaveRoom() {\n    if (!this.state.currentRoom) {\n      return;\n    }\n\n    try {\n      const room = this.state.currentRoom;\n      this.emit(\"leavingRoom\", { room });\n\n      await room.leave();\n\n      this.state.currentRoom = null;\n\n      this.emit(\"roomLeft\", { room });\n      this._debug(\"Left room:\", room.getInfo());\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"leaveRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Get available rooms\n   */\n  async getRooms(options = {}) {\n    this._ensureAuthenticated();\n\n    try {\n      const response = await this.apiClient.listRooms(\n        options.page || 1,\n        options.perPage || 20\n      );\n\n      this.emit(\"roomsLoaded\", { rooms: response.data || [] });\n\n      return response.data || [];\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"getRooms\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Get current room\n   */\n  getCurrentRoom() {\n    return this.state.currentRoom;\n  }\n\n  /**\n   * Get room by ID\n   */\n  getRoom(roomId) {\n    return this.state.rooms.get(roomId);\n  }\n\n  /**\n   * Create sub room in current room\n   */\n  async createSubRoom(config) {\n    if (!this.state.currentRoom) {\n      throw new Error(\"Must be in a main room to create sub rooms\");\n    }\n\n    if (this.state.currentRoom.type !== \"main\") {\n      throw new Error(\"Can only create sub rooms from main rooms\");\n    }\n\n    try {\n      this.emit(\"creatingSubRoom\", {\n        config,\n        parentRoom: this.state.currentRoom,\n      });\n\n      const subRoom = await this.state.currentRoom.createSubRoom(config);\n\n      this.emit(\"subRoomCreated\", {\n        subRoom,\n        parentRoom: this.state.currentRoom,\n      });\n      this._debug(\"Sub room created:\", subRoom.getInfo());\n\n      return subRoom;\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"createSubRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Join a sub room\n   */\n  async joinSubRoom(subRoomCode) {\n    if (!this.state.currentRoom) {\n      throw new Error(\"Must be in a main room to join sub rooms\");\n    }\n\n    try {\n      this.emit(\"joiningSubRoom\", {\n        subRoomCode,\n        parentRoom: this.state.currentRoom,\n      });\n\n      // Find sub room\n      const subRooms = await this.state.currentRoom.getSubRooms();\n      const subRoom = subRooms.find((sr) => sr.code === subRoomCode);\n\n      if (!subRoom) {\n        throw new Error(`Sub room with code ${subRoomCode} not found`);\n      }\n\n      // Join sub room\n      const joinResult = await subRoom.joinFromMain(this.state.user.id);\n\n      this.emit(\"subRoomJoined\", {\n        subRoom,\n        parentRoom: this.state.currentRoom,\n      });\n      this._debug(\"Joined sub room:\", subRoom.getInfo());\n\n      return joinResult;\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"joinSubRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Return to main room from sub room\n   */\n  async returnToMainRoom() {\n    if (!this.state.currentRoom || this.state.currentRoom.type !== \"breakout\") {\n      throw new Error(\"Must be in a sub room to return to main room\");\n    }\n\n    try {\n      this.emit(\"returningToMainRoom\", { subRoom: this.state.currentRoom });\n\n      const subRoom = this.state.currentRoom;\n      const mainRoom = await subRoom.returnToMainRoom();\n\n      this.state.currentRoom = mainRoom;\n\n      this.emit(\"returnedToMainRoom\", { mainRoom, previousSubRoom: subRoom });\n      this._debug(\"Returned to main room from sub room\");\n\n      return mainRoom;\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"returnToMainRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Switch between sub rooms\n   */\n  async switchSubRoom(targetSubRoomCode) {\n    if (!this.state.currentRoom || this.state.currentRoom.type !== \"breakout\") {\n      throw new Error(\"Must be in a sub room to switch to another sub room\");\n    }\n\n    try {\n      this.emit(\"switchingSubRoom\", {\n        fromSubRoom: this.state.currentRoom,\n        targetSubRoomCode,\n      });\n\n      const currentSubRoom = this.state.currentRoom;\n      const parentRoom = currentSubRoom.parentRoom;\n\n      // Find target sub room\n      const subRooms = await parentRoom.getSubRooms();\n      const targetSubRoom = subRooms.find(\n        (sr) => sr.code === targetSubRoomCode\n      );\n\n      if (!targetSubRoom) {\n        throw new Error(`Sub room with code ${targetSubRoomCode} not found`);\n      }\n\n      // Switch to target sub room\n      const joinResult = await currentSubRoom.switchToSubRoom(targetSubRoom);\n\n      this.state.currentRoom = targetSubRoom;\n\n      this.emit(\"subRoomSwitched\", {\n        fromSubRoom: currentSubRoom,\n        toSubRoom: targetSubRoom,\n      });\n      this._debug(\"Switched sub rooms:\", {\n        from: currentSubRoom.getInfo(),\n        to: targetSubRoom.getInfo(),\n      });\n\n      return joinResult;\n    } catch (error) {\n      this.emit(\"error\", { error, action: \"switchSubRoom\" });\n      throw error;\n    }\n  }\n\n  /**\n   * Get client state\n   */\n  getState() {\n    return {\n      user: this.state.user,\n      isAuthenticated: this.state.isAuthenticated,\n      currentRoom: this.state.currentRoom?.getInfo() || null,\n      connectionStatus: this.state.connectionStatus,\n      roomCount: this.state.rooms.size,\n    };\n  }\n\n  /**\n   * Get client configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n\n    // Update API client if needed\n    if (newConfig.host || newConfig.apiUrl) {\n      this.apiClient = new ApiClient({\n        host: this.config.host,\n        apiUrl: this.config.apiUrl,\n      });\n\n      if (this.state.isAuthenticated) {\n        this.apiClient.setAuth(this.state.user.token, this.state.user.id);\n      }\n    }\n\n    this.emit(\"configUpdated\", { config: this.config });\n  }\n\n  /**\n   * Enable debug mode\n   */\n  enableDebug() {\n    this.config.debug = true;\n    this._debug(\"Debug mode enabled\");\n  }\n\n  /**\n   * Disable debug mode\n   */\n  disableDebug() {\n    this.config.debug = false;\n  }\n\n  async sendMessage(text, metadata = {}) {\n    if (!this.state.currentRoom) {\n      throw new Error(\"No active room. Join a room first.\");\n    }\n\n    return await this.state.currentRoom.sendMessage(text, metadata);\n  }\n\n  async deleteMessage(messageId) {\n    if (!this.state.currentRoom) {\n      throw new Error(\"No active room. Join a room first.\");\n    }\n\n    return await this.state.currentRoom.deleteMessage(messageId);\n  }\n\n  async updateMessage(messageId, newText, metadata = {}) {\n    if (!this.state.currentRoom) {\n      throw new Error(\"No active room. Join a room first.\");\n    }\n\n    return await this.state.currentRoom.updateMessage(messageId, newText, metadata);\n  }\n\n  async sendTypingIndicator(isTyping = true) {\n    if (!this.state.currentRoom) {\n      return;\n    }\n\n    return await this.state.currentRoom.sendTypingIndicator(isTyping);\n  }\n\n  getMessages(limit = 100) {\n    if (!this.state.currentRoom) {\n      return [];\n    }\n\n    return this.state.currentRoom.getMessages(limit);\n  }\n\n  getTypingUsers() {\n    if (!this.state.currentRoom) {\n      return [];\n    }\n\n    return this.state.currentRoom.getTypingUsers();\n  }\n\n  clearMessages() {\n    if (!this.state.currentRoom) {\n      return;\n    }\n\n    this.state.currentRoom.clearMessages();\n  }\n\n  /**\n   * Cleanup client resources\n   */\n  async cleanup() {\n    try {\n      // Leave current room\n      if (this.state.currentRoom) {\n        await this.state.currentRoom.leave();\n      }\n\n      // Cleanup all rooms\n      for (const room of this.state.rooms.values()) {\n        await room.cleanup();\n      }\n\n      // Clear state\n      this.state.rooms.clear();\n      this.state.currentRoom = null;\n\n      // Remove all listeners\n      this.removeAllListeners();\n\n      this._debug(\"Client cleanup completed\");\n    } catch (error) {\n      console.error(\"Error during cleanup:\", error);\n    }\n  }\n\n  /**\n   * Setup event handlers for rooms\n   */\n  _setupRoomEvents(room) {\n    // Forward room events to client\n    const eventsToForward = [\n      \"roomJoined\",\n      \"roomLeft\",\n      \"participantAdded\",\n      \"participantRemoved\",\n      \"participantPinned\",\n      \"participantUnpinned\",\n      \"subRoomCreated\",\n      \"localStreamReady\",\n      \"remoteStreamReady\",\n      \"streamRemoved\",\n      \"audioToggled\",\n      \"videoToggled\",\n      \"messageSent\",\n      \"messageReceived\",\n      \"messageDeleted\",\n      \"messageUpdated\",\n      \"typingStarted\",\n      \"typingStopped\",\n      \"error\",\n    ];\n\n    eventsToForward.forEach((event) => {\n      room.on(event, (data) => {\n        this.emit(\n          event,\n          data\n        );\n      });\n    });\n  }\n\n  /**\n   * Setup initial event handlers\n   */\n  _setupEventHandlers() {\n    // Handle authentication token refresh\n    this.on(\"authenticated\", () => {\n      // Could implement token refresh logic here\n    });\n\n    // Handle connection status changes\n    this.on(\"connectionStatusChanged\", ({ status }) => {\n      if (status === \"failed\" && this.config.reconnectAttempts > 0) {\n        this._attemptReconnect();\n      }\n    });\n  }\n\n  /**\n   * Attempt to reconnect\n   */\n  async _attemptReconnect() {\n    let attempts = 0;\n\n    while (attempts < this.config.reconnectAttempts) {\n      try {\n        attempts++;\n        this._debug(\n          `Reconnection attempt ${attempts}/${this.config.reconnectAttempts}`\n        );\n\n        await new Promise((resolve) =>\n          setTimeout(resolve, this.config.reconnectDelay)\n        );\n\n        if (this.state.user) {\n          await this.authenticate(this.state.user.id);\n          this._debug(\"Reconnection successful\");\n          return;\n        }\n      } catch (error) {\n        this._debug(`Reconnection attempt ${attempts} failed:`, error.message);\n      }\n    }\n\n    this.emit(\"reconnectionFailed\");\n    this._debug(\"All reconnection attempts failed\");\n  }\n\n  /**\n   * Set connection status\n   */\n  _setConnectionStatus(status) {\n    if (this.state.connectionStatus !== status) {\n      this.state.connectionStatus = status;\n      this.emit(\"connectionStatusChanged\", { status });\n      this._debug(\"Connection status changed:\", status);\n    }\n  }\n\n  /**\n   * Ensure user is authenticated\n   */\n  _ensureAuthenticated() {\n    if (!this.state.isAuthenticated) {\n      throw new Error(\"User must be authenticated first\");\n    }\n  }\n\n  /**\n   * Debug logging\n   */\n  _debug(...args) {\n    if (this.config.debug) {\n      console.log(\"[ErmisClient]\", ...args);\n    }\n  }\n}\n\nexport default ErmisClient;\n","/**\n * Ermis Classroom SDK\n * Main entry point for the SDK\n */\n\nimport ErmisClient from \"./core/ErmisClient.js\";\nimport Room from \"./core/Room.js\";\nimport SubRoom from \"./core/SubRoom.js\";\nimport Participant from \"./core/Participant.js\";\nimport ApiClient from \"./api/ApiClient.js\";\nimport EventEmitter from \"./events/EventEmitter.js\";\n\n/**\n * SDK Version\n */\nexport const VERSION = \"1.0.0\";\n\n/**\n * Main SDK Class - Similar to LiveKit pattern\n */\nclass ErmisClassroom {\n  /**\n   * Create a new Ermis Classroom client\n   * @param {Object} config - Configuration options\n   * @returns {ErmisClient} - New client instance\n   */\n  static create(config = {}) {\n    return new ErmisClient(config);\n  }\n\n  /**\n   * Connect and authenticate user\n   * @param {string} serverUrl - Server URL\n   * @param {string} userId - User identifier\n   * @param {Object} options - Connection options\n   * @returns {Promise<ErmisClient>} - Connected client\n   */\n  static async connect(serverUrl, userId, options = {}) {\n    const config = {\n      host: serverUrl.replace(/^https?:\\/\\//, \"\"),\n      ...options,\n    };\n\n    const client = new ErmisClient(config);\n    await client.authenticate(userId);\n\n    return client;\n  }\n\n  /**\n   * Get SDK version\n   */\n  static get version() {\n    return VERSION;\n  }\n\n  /**\n   * Get available events\n   */\n  static get events() {\n    return {\n      // Client events\n      CLIENT_AUTHENTICATED: \"authenticated\",\n      CLIENT_AUTHENTICATION_FAILED: \"authenticationFailed\",\n      CLIENT_LOGGED_OUT: \"loggedOut\",\n      CLIENT_CONNECTION_STATUS_CHANGED: \"connectionStatusChanged\",\n\n      // Room events\n      ROOM_CREATED: \"roomCreated\",\n      ROOM_JOINED: \"roomJoined\",\n      ROOM_LEFT: \"roomLeft\",\n\n      // Participant events\n      PARTICIPANT_ADDED: \"participantAdded\",\n      PARTICIPANT_REMOVED: \"participantRemoved\",\n      PARTICIPANT_PINNED: \"participantPinned\",\n      PARTICIPANT_UNPINNED: \"participantUnpinned\",\n      AUDIO_TOGGLED: \"audioToggled\",\n      VIDEO_TOGGLED: \"videoToggled\",\n\n      // Remote participant status events\n      REMOTE_AUDIO_STATUS_CHANGED: \"remoteAudioStatusChanged\",\n      REMOTE_VIDEO_STATUS_CHANGED: \"remoteVideoStatusChanged\",\n\n      // Screen sharing events\n      SCREEN_SHARE_STARTED: \"screenShareStarted\",\n      SCREEN_SHARE_STOPPED: \"screenShareStopped\",\n      REMOTE_SCREEN_SHARE_STARTED: \"remoteScreenShareStarted\",\n      REMOTE_SCREEN_SHARE_STOPPED: \"remoteScreenShareStopped\",\n\n      // Pin for everyone events\n      PARTICIPANT_PINNED_FOR_EVERYONE: \"participantPinnedForEveryone\",\n      PARTICIPANT_UNPINNED_FOR_EVERYONE: \"participantUnpinnedForEveryone\",\n\n      // Sub room events\n      SUB_ROOM_CREATED: \"subRoomCreated\",\n      SUB_ROOM_JOINED: \"subRoomJoined\",\n      SUB_ROOM_LEFT: \"subRoomLeft\",\n      SUB_ROOM_SWITCHED: \"subRoomSwitched\",\n\n      // Media stream events\n      LOCAL_STREAM_READY: \"localStreamReady\",\n      REMOTE_STREAM_READY: \"remoteStreamReady\",\n      STREAM_REMOVED: \"streamRemoved\",\n\n      // Chat events\n      MESSAGE_SENT: \"messageSent\",\n      MESSAGE_RECEIVED: \"messageReceived\",\n      MESSAGE_DELETED: \"messageDeleted\",\n      MESSAGE_UPDATED: \"messageUpdated\",\n      TYPING_STARTED: \"typingStarted\",\n      TYPING_STOPPED: \"typingStopped\",\n      CHAT_HISTORY_LOADED: \"chatHistoryLoaded\",\n\n      // Error events\n      ERROR: \"error\",\n    };\n  }\n\n  /**\n   * Media device utilities\n   */\n  static get MediaDevices() {\n    return {\n      /**\n       * Get available media devices\n       */\n      async getDevices() {\n        if (!navigator.mediaDevices?.enumerateDevices) {\n          throw new Error(\"Media devices not supported\");\n        }\n\n        const devices = await navigator.mediaDevices.enumerateDevices();\n\n        return {\n          cameras: devices.filter((d) => d.kind === \"videoinput\"),\n          microphones: devices.filter((d) => d.kind === \"audioinput\"),\n          speakers: devices.filter((d) => d.kind === \"audiooutput\"),\n        };\n      },\n\n      /**\n       * Get user media with constraints\n       */\n      async getUserMedia(constraints = { video: true, audio: true }) {\n        if (!navigator.mediaDevices?.getUserMedia) {\n          throw new Error(\"getUserMedia not supported\");\n        }\n\n        return await navigator.mediaDevices.getUserMedia(constraints);\n      },\n\n      /**\n       * Check for media permissions\n       */\n      async checkPermissions() {\n        const permissions = {};\n\n        if (navigator.permissions) {\n          try {\n            permissions.camera = await navigator.permissions.query({\n              name: \"camera\",\n            });\n            permissions.microphone = await navigator.permissions.query({\n              name: \"microphone\",\n            });\n          } catch (error) {\n            console.warn(\"Permission check failed:\", error);\n          }\n        }\n\n        return permissions;\n      },\n    };\n  }\n\n  /**\n   * Room types constants\n   */\n  static get RoomTypes() {\n    return {\n      MAIN: \"main\",\n      BREAKOUT: \"breakout\",\n      PRESENTATION: \"presentation\",\n      DISCUSSION: \"discussion\",\n    };\n  }\n\n  /**\n   * Connection status constants\n   */\n  static get ConnectionStatus() {\n    return {\n      DISCONNECTED: \"disconnected\",\n      CONNECTING: \"connecting\",\n      CONNECTED: \"connected\",\n      FAILED: \"failed\",\n    };\n  }\n\n  /**\n   * Participant roles constants\n   */\n  static get ParticipantRoles() {\n    return {\n      OWNER: \"owner\",\n      MODERATOR: \"moderator\",\n      PARTICIPANT: \"participant\",\n      OBSERVER: \"observer\",\n    };\n  }\n}\n\n/**\n * Named exports for individual classes\n */\nexport { ErmisClient, Room, SubRoom, Participant, ApiClient, EventEmitter };\n\n/**\n * Default export - Main SDK class\n */\nexport default ErmisClassroom;\n","let wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nconst WasmEncoderFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmencoder_free(ptr >>> 0, 1));\n\nexport class WasmEncoder {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmEncoderFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmencoder_free(ptr, 0);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @param {number} mtu\n     */\n    constructor(data, mtu) {\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.wasmencoder_new(ptr0, len0, mtu);\n        this.__wbg_ptr = ret >>> 0;\n        WasmEncoderFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {number} repair_packets_count\n     * @returns {Array<any>}\n     */\n    encode(repair_packets_count) {\n        const ret = wasm.wasmencoder_encode(this.__wbg_ptr, repair_packets_count);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    getMTU() {\n        const ret = wasm.wasmencoder_getMTU(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    getConfigBuffer() {\n        const ret = wasm.wasmencoder_getConfigBuffer(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {\n        const ret = arg0.buffer;\n        return ret;\n    };\n    imports.wbg.__wbg_length_a446193dc22c12f8 = function(arg0) {\n        const ret = arg0.length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_78feb108b6472713 = function() {\n        const ret = new Array();\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_a381634e90c276d4 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_push_737cfc8c1432c2c6 = function(arg0, arg1) {\n        const ret = arg0.push(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_set_65595bdd868b3009 = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_0;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL('raptorq_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync };\nexport default __wbg_init;\n"],"names":["EventEmitter$1","constructor","this","_events","Map","on","event","listener","has","set","get","push","off","listeners","index","indexOf","splice","length","delete","emit","args","forEach","error","once","onceWrapper","removeAllListeners","clear","listenerCount","ApiClient$1","config","host","apiBaseUrl","apiUrl","jwtToken","userId","setAuth","token","apiCall","endpoint","method","body","Error","options","headers","Authorization","JSON","stringify","response","fetch","ok","status","json","getDummyToken","sub","createRoom","roomName","roomType","room_name","room_type","listRooms","page","perPage","list_query","per_page","sort_by","sort_order","conditions","is_active","getRoomById","roomId","joinRoom","roomCode","appName","room_code","app_name","createSubRoom","parentRoomId","subRoomName","subRoomType","parent_room_id","getSubRooms","leaveRoom","membershipId","switchToSubRoom","subRoomCode","room_id","sub_room_code","getRoomMembers","updateRoom","updates","deleteRoom","Participant$1","EventEmitter","super","streamId","role","isLocal","isAudioEnabled","isVideoEnabled","isPinned","publisher","subscriber","isScreenSharing","screenSubscriber","connectionStatus","getDisplayName","roleText","localText","toggleMicrophone","toggleMic","participant","enabled","action","toggleCamera","toggleRemoteAudio","toggleAudio","togglePin","switchBitrate","pinned","setConnectionStatus","_getStatusText","setPublisher","setSubscriber","updateMicStatus","updateCameraStatus","cleanup","stop","getInfo","Publisher","publishUrl","streamType","currentConfig","codec","width","height","framerate","bitrate","kSampleRate","opusBaseTime","opusSamplesSent","opusSamplesPerChunk","opusChunkCount","stream","audioProcessor","videoProcessor","webTransport","isChannelOpen","sequenceNumber","isPublishing","cameraEnabled","micEnabled","hasCamera","undefined","hasMic","onStatusUpdate","message","isError","onStreamStart","onStreamStop","onServerEvent","wasmInitialized","wasmInitializing","wasmInitPromise","initAudioRecorder","WasmEncoder","publishStreams","videoEncoders","eventStream","subStreams","name","channelName","init","loadAllDependencies","document","querySelector","Promise","resolve","reject","script","createElement","src","onload","onerror","head","appendChild","default","then","raptorq_wasm","catch","err","opusModule","import","Date","now","startPublishing","setupConnection","getMediaStream","startStreaming","turnOffCamera","turnOnCamera","turnOffMic","turnOnMic","sendMeetingEvent","eventType","targetStreamId","eventMessage","type","sender_stream_id","timestamp","target_stream_id","sendEvent","constraints","audio","sampleRate","channelCount","echoCancellation","noiseSuppression","video","ideal","frameRate","navigator","mediaDevices","getUserMedia","getDisplayMedia","videoTrack","getVideoTracks","onended","videoOnlyStream","MediaStream","videoTracks","addTrack","initVideoEncoders","subStream","startsWith","encoder","VideoEncoder","output","chunk","metadata","handleVideoChunk","e","latencyMode","hardwareAcceleration","metadataReady","videoDecoderConfig","WebTransport","ready","createEventStream","createBidirectionalStream","readable","writer","writable","getWriter","reader","getReader","initData","TextEncoder","encode","sendOverEventStream","setupEventStreamReader","sendPublisherState","workerInterval","Worker","postMessage","interval","lastPingTime","onmessage","ping","value","done","read","msg","TextDecoder","decode","parse","data","bytes","len","out","Uint8Array","DataView","buffer","setUint32","write","eventData","eventJson","stateEvent","configSent","sendOverStream","setupStreamReader","frameBytes","streamData","startVideoCapture","startOpusAudioStreaming","encoderObj","configure","triggerWorker","track","MediaStreamTrackProcessor","frameCounter","cameraEncoders","Array","from","entries","filter","_","obj","result","frame","window","videoBaseTimestamp","close","keyFrame","i","quality","isLastEncoder","encodeQueueSize","frameToEncode","VideoFrame","audioTrack","getAudioTracks","audioRecorderOptions","encoderApplication","encoderComplexity","encoderFrameSize","timeSlice","audioRecorder","ondataavailable","typedArray","handleOpusAudioChunk","start","decoderConfig","codedWidth","codedHeight","description","sendStreamConfig","chunkData","ArrayBuffer","byteLength","copyTo","packet","createPacketWithHeader","dataArray","audioConfig","numberOfChannels","performance","audioStartPerfTime","Math","floor","mediaType","configPacket","vConfigUint8","vConfigBase64","uint8ArrayToBase64","aConfigBase64","adjustedTimestamp","safeTimestamp","MAX_TS","binary","subarray","String","fromCharCode","apply","btoa","startShareScreen","screenStream","startEvent","screenConfig","find","s","screenEncoder","handleScreenVideoChunk","encoderConfig","screenVideoEncoder","screenAudioRecorder","handleScreenAudioChunk","screenAudioBaseTime","screenAudioSamplesSent","screenVideoProcessor","stopShareScreen","screenBaseTimestamp","stopEvent","state","flush","getTracks","screenAudioConfig","sendScreenDecoderConfigs","hasAudio","videoReady","audioReady","videoConfig","isActive","streamInfo","activeStreams","keys","Subscriber$1","isOwnStream","mediaWorkerUrl","audioWorkletUrl","mstgPolyfillUrl","isStarted","worker","audioWorkletNode","videoGenerator","videoWriter","mediaStream","subscriberId","audioMixer","_updateConnectionStatus","channel","MessageChannel","_loadPolyfill","_initWorker","port2","_initAudioSystem","port1","_initVideoSystem","removeSubscriber","terminate","_cleanupVideoSystem","setAudioMixer","MediaStreamTrackGenerator","channelPort","_handleWorkerMessage","mediaUrl","port","reason","addSubscriber","bufferMs","isPlaying","newBufferSize","kind","releaseLock","channelData","timeStamp","audioEnabled","_handleVideoData","previousStatus","AudioMixer$1","audioContext","mixerNode","outputDestination","subscriberNodes","isInitialized","outputAudioElement","masterVolume","bufferSize","enableEchoCancellation","debug","initialize","_debug","AudioContext","webkitAudioContext","latencyHint","resume","createGain","gain","createMediaStreamDestination","connect","autoplay","style","display","setAttribute","_setupErrorHandlers","isOwnAudio","channelWorkletPort","_loadAudioWorklet","workletNode","AudioWorkletNode","numberOfInputs","numberOfOutputs","outputChannelCount","gainNode","addedAt","_updateOutputAudio","_setupWorkletMessageHandler","subscriberData","disconnect","setSubscriberVolume","volume","normalizedVolume","max","min","setSubscriberMuted","muted","setMasterVolume","getOutputMediaStream","getStats","subscriberCount","size","audioContextState","subscribers","map","id","getSubscriberIds","hasSubscriber","suspend","srcObject","parentNode","removeChild","audioWorklet","addModule","includes","onstatechange","addEventListener","async","hidden","_sleep","ms","setTimeout","Room","code","ownerId","apiClient","mediaConfig","participants","localParticipant","subRooms","pinnedParticipant","messages","typingUsers","join","room","joinResponse","stream_id","roomDetails","_updateFromApiData","_setupParticipants","_setupMediaConnections","values","leave","_cleanupMediaConnections","_cleanupParticipants","subRoomData","subRoom","user_id","subRoomsData","switchResponse","returnToMainRoom","sendMessage","text","trim","_generateMessageId","senderId","senderName","customData","messageEvent","deleteMessage","messageId","deleteEvent","m","updateMessage","newText","updateEvent","messageIndex","findIndex","updatedAt","sendTypingIndicator","isTyping","typingEvent","getMessages","limit","slice","getTypingUsers","clearMessages","addParticipant","memberData","Participant","_setupParticipantEvents","removeParticipant","getParticipant","getParticipants","pinParticipant","unpinParticipant","unpinnedParticipant","participantCount","subRoomCount","participantsData","participantData","AudioMixer","_setupLocalPublisher","_setupRemoteSubscriber","_setupStreamEventForwarding","webtpUrl","_handleServerEvent","Subscriber","streamOutputEnabled","onStatus","joinedParticipant","membership_id","sender","user","p","roomData","random","toString","substr","_removeStreamEventForwarding","Room$1","SubRoom","parentRoom","maxParticipants","autoReturn","duration","startTime","isTemporary","allowSelfAssign","_setupSubRoomEvents","joinFromMain","_pauseMediaConnections","joinResult","_startDurationTimer","_resumeMediaConnections","targetSubRoom","fromSubRoom","toSubRoom","inviteParticipant","inviteToSubRoom","assignParticipant","assignToSubRoom","broadcastMessage","broadcastToSubRoom","getRemainingTime","elapsed","remaining","ceil","extendDuration","additionalMinutes","newDuration","setMaxParticipants","current","isFull","isEmpty","hasExpired","remainingTime","warningTime","remainingMinutes","_durationTimer","clearTimeout","remainingMs","_handleExpiry","serialize","participantIds","createdAt","fromSerializedData","SubRoom$1","ErmisClient$1","reconnectAttempts","reconnectDelay","ApiClient","isAuthenticated","currentRoom","rooms","defaultVideoConfig","defaultAudioConfig","channels","_setupEventHandlers","authenticate","_setConnectionStatus","test","tokenResponse","access_token","authenticatedAt","manualAuthenticate","logout","_ensureAuthenticated","_setupRoomEvents","autoJoin","r","getRooms","getCurrentRoom","getRoom","joinSubRoom","sr","mainRoom","previousSubRoom","switchSubRoom","targetSubRoomCode","currentSubRoom","to","getState","roomCount","getConfig","updateConfig","newConfig","enableDebug","disableDebug","_attemptReconnect","attempts","VERSION","wasm","cachedTextDecoder","ignoreBOM","fatal","cachedUint8ArrayMemory0","getUint8ArrayMemory0","memory","WASM_VECTOR_LEN","WasmEncoderFinalization","FinalizationRegistry","register","unregister","ptr","__wbg_wasmencoder_free","__wbg_get_imports","imports","wbg","__wbg_buffer_609cc3eee51ed158","arg0","__wbg_length_a446193dc22c12f8","__wbg_new_78feb108b6472713","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","arg1","arg2","__wbg_newwithlength_a381634e90c276d4","__wbg_push_737cfc8c1432c2c6","__wbg_set_65595bdd868b3009","__wbindgen_init_externref_table","table","__wbindgen_export_0","offset","grow","__wbindgen_memory","__wbindgen_throw","__wbg_init","module_or_path","Object","getPrototypeOf","prototype","URL","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","baseURI","Request","instance","module","Response","WebAssembly","instantiateStreaming","arrayBuffer","instantiate","Instance","__wbg_load","exports","__wbindgen_wasm_module","__wbindgen_start","__wbg_finalize_init","__destroy_into_raw","__wbg_ptr","free","mtu","ptr0","arg","malloc","passArray8ToWasm0","__wbindgen_malloc","len0","ret","wasmencoder_new","repair_packets_count","wasmencoder_encode","getMTU","wasmencoder_getMTU","getConfigBuffer","wasmencoder_getConfigBuffer","create","ErmisClient","serverUrl","replace","client","version","events","CLIENT_AUTHENTICATED","CLIENT_AUTHENTICATION_FAILED","CLIENT_LOGGED_OUT","CLIENT_CONNECTION_STATUS_CHANGED","ROOM_CREATED","ROOM_JOINED","ROOM_LEFT","PARTICIPANT_ADDED","PARTICIPANT_REMOVED","PARTICIPANT_PINNED","PARTICIPANT_UNPINNED","AUDIO_TOGGLED","VIDEO_TOGGLED","REMOTE_AUDIO_STATUS_CHANGED","REMOTE_VIDEO_STATUS_CHANGED","SCREEN_SHARE_STARTED","SCREEN_SHARE_STOPPED","REMOTE_SCREEN_SHARE_STARTED","REMOTE_SCREEN_SHARE_STOPPED","PARTICIPANT_PINNED_FOR_EVERYONE","PARTICIPANT_UNPINNED_FOR_EVERYONE","SUB_ROOM_CREATED","SUB_ROOM_JOINED","SUB_ROOM_LEFT","SUB_ROOM_SWITCHED","LOCAL_STREAM_READY","REMOTE_STREAM_READY","STREAM_REMOVED","MESSAGE_SENT","MESSAGE_RECEIVED","MESSAGE_DELETED","MESSAGE_UPDATED","TYPING_STARTED","TYPING_STOPPED","CHAT_HISTORY_LOADED","ERROR","MediaDevices","getDevices","enumerateDevices","devices","cameras","d","microphones","speakers","checkPermissions","permissions","camera","query","microphone","RoomTypes","MAIN","BREAKOUT","PRESENTATION","DISCUSSION","ConnectionStatus","DISCONNECTED","CONNECTING","CONNECTED","FAILED","ParticipantRoles","OWNER","MODERATOR","PARTICIPANT","OBSERVER"],"mappings":"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"}