name: Manual Release VCR SDK

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  manual-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@ermisnetwork'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          cd packages/vcr-sdk
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ inputs.version_bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version from $OLD_VERSION to $NEW_VERSION"

      - name: Update pnpm lockfile
        run: pnpm install --no-frozen-lockfile

      - name: Commit version bump
        run: |
          git add packages/vcr-sdk/package.json pnpm-lock.yaml
          git commit -m "chore: bump vcr-sdk version to ${{ steps.version.outputs.new_version }}"
          git push origin main

      - name: Build SDK
        run: pnpm build:sdk

      - name: Run tests
        run: |
          cd packages/vcr-sdk
          pnpm test || echo "No tests found, skipping..."

      - name: Create release archive
        run: |
          cd packages/vcr-sdk/dist
          tar -czf ../../../vcr-sdk-${{ steps.version.outputs.new_version }}.tar.gz .
          cd ../../..

      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD -- packages/vcr-sdk >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: vcr-sdk-v${{ steps.version.outputs.new_version }}
          release_name: VCR SDK v${{ steps.version.outputs.new_version }}
          body: |
            ## VCR SDK v${{ steps.version.outputs.new_version }}
            
            ${{ inputs.prerelease && '⚠️ **This is a prerelease version**' || '✅ **Stable Release**' }}
            
            ### 📦 Installation
            
            **NPM:**
            ```bash
            npm install @ermisnetwork/vcr-sdk@${{ steps.version.outputs.new_version }}
            ```
            
            **pnpm:**
            ```bash
            pnpm add @ermisnetwork/vcr-sdk@${{ steps.version.outputs.new_version }}
            ```
            
            **Yarn:**
            ```bash
            yarn add @ermisnetwork/vcr-sdk@${{ steps.version.outputs.new_version }}
            ```
            
            ### 🚀 Quick Start
            
            ```typescript
            import { createVCRSDK } from '@ermisnetwork/vcr-sdk';
            
            const sdk = createVCRSDK({
              baseUrl: 'http://localhost:3000/api',
              apiKey: 'your-api-key-here',
            });
            
            const events = await sdk.events.list();
            ```
            
            ### 📝 Changes
            - Version bumped from ${{ steps.version.outputs.old_version }} to ${{ steps.version.outputs.new_version }} (${{ inputs.version_bump }})
            
            ### 📚 Documentation
            - [README](https://github.com/${{ github.repository }}/blob/main/packages/vcr-sdk/README.md)
            - [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/packages/vcr-sdk/QUICKSTART.md)
          draft: false
          prerelease: ${{ inputs.prerelease }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./vcr-sdk-${{ steps.version.outputs.new_version }}.tar.gz
          asset_name: vcr-sdk-${{ steps.version.outputs.new_version }}.tar.gz
          asset_content_type: application/gzip

      - name: Prepare package for publishing
        run: |
          cd packages/vcr-sdk
          # Create .npmrc for GitHub Packages
          echo "@ermisnetwork:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=\${NODE_AUTH_TOKEN}" >> .npmrc

      - name: Publish to GitHub Packages
        run: |
          cd packages/vcr-sdk
          npm publish ${{ inputs.prerelease && '--tag beta' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ steps.version.outputs.old_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type**: ${{ inputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: vcr-sdk-v${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Install Command" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pnpm add @ermisnetwork/vcr-sdk@${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

