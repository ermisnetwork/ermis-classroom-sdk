name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@ermisnetwork'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version from $OLD_VERSION to $NEW_VERSION"

      - name: Commit version bump
        run: |
          git add package.json pnpm-lock.yaml
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push origin main

      - name: Build project
        run: pnpm run build

      - name: Create release archive
        run: |
          cd dist
          tar -czf ../ermis-classroom-sdk-${{ steps.version.outputs.new_version }}.tar.gz .
          cd ..

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Changes in v${{ steps.version.outputs.new_version }}
            
            Auto-generated release with built distribution files.
            
            ### Installation
            ```bash
            npm install @ermisnetwork/ermis-classroom-sdk@${{ steps.version.outputs.new_version }}
            ```
            
            ### What's Changed
            - Version bumped from ${{ steps.version.outputs.old_version }} to ${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ermis-classroom-sdk-${{ steps.version.outputs.new_version }}.tar.gz
          asset_name: ermis-classroom-sdk-${{ steps.version.outputs.new_version }}.tar.gz
          asset_content_type: application/gzip

      - name: Prepare package for publishing
        run: |
          cd dist
          if [ ! -f package.json ]; then
            echo "Error: package.json not found in dist/"
            exit 1
          fi

      - name: Publish to GitHub Packages
        run: |
          cd dist
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

