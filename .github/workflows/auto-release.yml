name: Auto Release Packages

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
      - '!packages/**/**.md'
      - '!packages/**/examples/**'
      - 'pnpm-lock.yaml'

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed packages
        id: detect
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)

          # Find unique packages that changed
          PACKAGES=$(echo "$CHANGED_FILES" | grep '^packages/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')

          # Load release config
          CONFIG_FILE=".github/release-config.json"

          # Filter out packages without package.json or with manual version changes
          RELEASE_PACKAGES="[]"

          for pkg in $(echo "$PACKAGES" | jq -r '.[]'); do
            if [ -f "packages/$pkg/package.json" ]; then
              # Check if package is enabled in config
              if [ -f "$CONFIG_FILE" ]; then
                ENABLED=$(jq -r ".packages.\"$pkg\".enabled // .defaults.autoRelease // true" "$CONFIG_FILE")
                AUTO_RELEASE=$(jq -r ".packages.\"$pkg\".autoRelease // .defaults.autoRelease // true" "$CONFIG_FILE")

                if [ "$ENABLED" != "true" ] || [ "$AUTO_RELEASE" != "true" ]; then
                  echo "Package $pkg: Disabled in config, skipping"
                  continue
                fi
              fi

              # Check if version was manually changed
              if git diff HEAD^ HEAD -- "packages/$pkg/package.json" | grep -q '"version"'; then
                echo "Package $pkg: Version manually changed, skipping"
              else
                echo "Package $pkg: Will auto-release"
                RELEASE_PACKAGES=$(echo "$RELEASE_PACKAGES" | jq --arg pkg "$pkg" '. += [$pkg]')
              fi
            fi
          done

          echo "packages=$RELEASE_PACKAGES" >> $GITHUB_OUTPUT

          if [ "$(echo "$RELEASE_PACKAGES" | jq 'length')" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

          echo "Packages to release: $RELEASE_PACKAGES"

  release-package:
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@ermisnetwork'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get package info
        id: pkg_info
        run: |
          PKG_NAME=$(node -p "require('./packages/${{ matrix.package }}/package.json').name")
          echo "name=$PKG_NAME" >> $GITHUB_OUTPUT

      - name: Bump patch version
        id: version
        run: |
          cd packages/${{ matrix.package }}
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped ${{ matrix.package }} from $OLD_VERSION to $NEW_VERSION"

      - name: Update pnpm lockfile
        run: pnpm install --no-frozen-lockfile

      - name: Commit version bump
        run: |
          git add packages/${{ matrix.package }}/package.json pnpm-lock.yaml
          git commit -m "chore: auto bump ${{ matrix.package }} to ${{ steps.version.outputs.new_version }} [skip ci]" || echo "No changes to commit"
          git pull --rebase origin main
          git push origin main

      - name: Build package
        run: |
          cd packages/${{ matrix.package }}
          pnpm build

      - name: Create release archive
        run: |
          cd packages/${{ matrix.package }}/dist
          tar -czf ../../../${{ matrix.package }}-${{ steps.version.outputs.new_version }}.tar.gz .
          cd ../../..

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.package }}-v${{ steps.version.outputs.new_version }}
          release_name: ${{ steps.pkg_info.outputs.name }} v${{ steps.version.outputs.new_version }}
          body: |
            ## ${{ steps.pkg_info.outputs.name }} v${{ steps.version.outputs.new_version }}
            
            Automatically generated release.
            
            ### 📦 Installation
            
            ```bash
            pnpm add ${{ steps.pkg_info.outputs.name }}@${{ steps.version.outputs.new_version }}
            ```
            
            ### 📝 Changes
            - Version auto-bumped from ${{ steps.version.outputs.old_version }} to ${{ steps.version.outputs.new_version }}
            - Latest changes from main branch
            
            ### 📚 Documentation
            - [README](https://github.com/${{ github.repository }}/blob/main/packages/${{ matrix.package }}/README.md)
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.package }}-${{ steps.version.outputs.new_version }}.tar.gz
          asset_name: ${{ matrix.package }}-${{ steps.version.outputs.new_version }}.tar.gz
          asset_content_type: application/gzip

      - name: Prepare package for publishing
        run: |
          cd packages/${{ matrix.package }}
          # Create .npmrc for GitHub Packages if it doesn't exist
          if [ ! -f .npmrc ]; then
            echo "@ermisnetwork:registry=https://npm.pkg.github.com" > .npmrc
          fi

      - name: Publish to GitHub Packages
        run: |
          cd packages/${{ matrix.package }}
          npm publish || echo "Publish failed or package already exists"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

